1/((-0.869209)/x01)
sin(-1.316633)
exp(x00)**((-0.374301))
exp(1/(x01))
((x01*x01)/log(1.233871))
((2.718282-x01)-(x00-x01))
sin(2.050547)**(x00)
((x00-(-0.518794))+((-0.443841)-(-0.146795)))
log(log(x01, x01))
(1/(x00)/((-0.180538)/(-0.578596)))
sin((-0.111580))**(x01)
exp(2.449842*x00)
sin(log((-0.552313)))
(log(x00, 1.120815)-log(x01, x01))
exp((-0.011305)/0.227621)
log((x01)**((-0.902583)))
((1.079256-0.111876))**((1.564102+x01))
(-(-(-0.563934)))
((x01+(-1.275965))-log(1.199251, x00))
(-(-1.060557))
log(log(x00, x00), ((-1.388695))**((-2.504407)))
((x01*x01)/log((-0.109171), x00))
((1.498301+x00)*log(0.127492, 3.141593))
1/(x01)**(x00)
(exp(x01)/(x00-x00))
exp(log(x00, 0.261200))
((x00-(-0.089683))/1/(1.292617))
log(exp(x01))
exp(exp(0.435222))
((0.148270-0.646770)-(x00)**(0.188513))
(log(0.152704)/log(x00, 1.344507))
(sin(-0.187363)/((-1.193145)/3.141593))
(log(x01, x00))**((0.611366*(-0.431982)))
(-(0.637926/(-1.428999)))
((1.271180*0.252407)+(x01/x00))
log((-x01))
cos(x01/x01)
(-1/(0.372426))
sin(x00*(-1.426609))
(log(x01, 1.208820)-(0.620407)**(x00))
1/(0.840938*x01)
(log(0.520062)*cos(0.806777))
1/((-0.022412)+x01)
(1/(-0.459693)*log((-0.597413)))
log((-1.553188), 1/(x01))
exp(x01*(-0.377991))
((0.135302-x01))**(((-0.472126)*x00))
(log((-0.891932), (-0.727836))-(2.718282*x00))
(-(-x00))
1/(exp(-0.176681))
1 21
2 3
3 13
From C++ to C++ 20935

General 1

1/((-0.869209)/x01)
2.1684e-19
sin(-1.316633)
2.1684e-19
exp(x00)**((-0.374301))
0.553305
exp(1/(x01))
1.11254e-308
((x01*x01)/log(1.233871))
0.406704
((2.718282-x01)-(x00-x01))
2.1684e-19
sin(2.050547)**(x00)
0.531721
((x00-(-0.518794))+((-0.443841)-(-0.146795)))
2.1684e-19
log(log(x01, x01))
2.1684e-19
(1/(x00)/((-0.180538)/(-0.578596)))
0.450962
sin((-0.111580))**(x01)
1.11254e-308
exp(2.449842*x00)
2.1684e-19
sin(log((-0.552313)))
1.11254e-308
(log(x00, 1.120815)-log(x01, x01))
2.1684e-19
exp((-0.011305)/0.227621)
0.36636
log((x01)**((-0.902583)))
2.1684e-19
((1.079256-0.111876))**((1.564102+x01))
0.529022
(-(-(-0.563934)))
2.1684e-19
((x01+(-1.275965))-log(1.199251, x00))
1.11254e-308
(-(-1.060557))
0.372983
log(log(x00, x00), ((-1.388695))**((-2.504407)))
1.11254e-308
((x01*x01)/log((-0.109171), x00))
1.11254e-308
((1.498301+x00)*log(0.127492, 3.141593))
2.1684e-19
1/(x01)**(x00)
2.1684e-19
(exp(x01)/(x00-x00))
1.11254e-308
exp(log(x00, 0.261200))
0.463367
((x00-(-0.089683))/1/(1.292617))
2.1684e-19
log(exp(x01))
2.1684e-19
exp(exp(0.435222))
0.389404
((0.148270-0.646770)-(x00)**(0.188513))
2.1684e-19
(log(0.152704)/log(x00, 1.344507))
1.11254e-308
(sin(-0.187363)/((-1.193145)/3.141593))
0.338589
(log(x01, x00))**((0.611366*(-0.431982)))
1.11254e-308
(-(0.637926/(-1.428999)))
0.354263
((1.271180*0.252407)+(x01/x00))
0.945976
log((-x01))
1.11254e-308
cos(x01/x01)
2.1684e-19
(-1/(0.372426))
2.1684e-19
sin(x00*(-1.426609))
2.1684e-19
(log(x01, 1.208820)-(0.620407)**(x00))
2.1684e-19
1/(0.840938*x01)
2.1684e-19
(log(0.520062)*cos(0.806777))
2.1684e-19
1/((-0.022412)+x01)
2.1684e-19
(1/(-0.459693)*log((-0.597413)))
1.11254e-308
log((-1.553188), 1/(x01))
1.11254e-308
exp(x01*(-0.377991))
0.587885
((0.135302-x01))**(((-0.472126)*x00))
2.1684e-19
(log((-0.891932), (-0.727836))-(2.718282*x00))
1.11254e-308
(-(-x00))
2.1684e-19
1/(exp(-0.176681))
0.377675
selection is done
crossover is done
mutation is done
exp((-1.471369))**((-0.377991))
exp(x01*x01)
(exp(0.435222)/((-0.264595)*x01))
1/(exp(x01))
exp(exp(-0.730430))
(x00)**(((-0.775309)+x01))
((1.271180*3.141593)+(exp(-0.176681)/x00))
(1/(x00)/(x01*(x01)**(1.770176)))
exp(log((-0.537190), 0.261200))
1/(exp(x00))
((x01*x01)/(x01+0.340636))
exp(log(1.233871)/x01)
exp(0.324928)
((1.079256-x01))**((x01+x01))
((1.271180*0.252407)+(x01*x00))
((1.271180*0.252407)+(x01*x00))
((x01*0.252407)+(x01/1.271180))
exp((-0.359521))**((-0.374301))
exp((-0.284600)/(-2.653453))
exp(1/(exp(x01)))
exp(x00*(-0.431963))
(-1/(x00))
(1/(x01*(-0.377991))/log(1.401999))
(1/(x01)/(x01/x00))
(0.873070/log(1.233871))
exp(x01)
1/(-(-0.838660))
(0.261200)**((0.389339+x01))
((-1.334456)+(x01/x00))
(sin(-0.187363)/(log(x00, 0.261200)/(-0.555454)))
((0.661753/x01)/1.060557)
(1/(1.060557)/(x00/(-0.578596)))
sin(1/(-0.642338))**(x00)
exp(x01)
sin(x01)**(x00)
((0.637926-0.111876))**((0.121642+x01))
exp(x01)
1/(x01)**(x00)
1/(1/(x01))
((x01*(x01*x01))/log(1.233871))
((1.079256-0.111876))**((0.252407+0.406792))
(((1.564102+x01)-0.111876))**((1.564102+0.140389))
exp(-0.669970)
exp(exp(1.344039))
exp(x00)
((1.271180*0.252407)+0.116868)
1/(-0.651091)
(x01/((-1.193145)/0.334663))
exp(x01*x01)
(0.435222/(x01*(-0.011019)))
1 26
2 3
3 16
From C++ to C++ 35931
1.11254e-308
0.58218
2.1684e-19
0.603598
0.384383
0.793485
0.54959
2.1684e-19
1.11254e-308
0.600829
0.398586
1.11254e-308
0.384995
0.532799
2.1684e-19
2.1684e-19
2.1684e-19
1.11254e-308
0.369227
0.607983
0.553994
2.1684e-19
2.1684e-19
2.1684e-19
0.380711
0.608467
0.374376
0.537744
2.1684e-19
1.11254e-308
2.1684e-19
0.000378395
2.1684e-19
0.615566
0.73161
0.534061
0.617676
2.1684e-19
2.1684e-19
0.389629
0.344114
0.509393
0.369476
2.1684e-19
2.1684e-19
0.344349
2.1684e-19
2.1684e-19
0.578313
2.1684e-19
fitness is counted
the best are found
Algorithm is running for 56876 seconds

General 2

((1.271180*0.252407)+(x01/x00))
0.945976
(x00)**(((-0.775309)+x01))
0.793485
sin(x01)**(x00)
0.73161
exp(x01)
0.617676
exp(x01)
0.615566
exp(x01)
0.608467
exp(1/(exp(x01)))
0.607983
1/(exp(x01))
0.603598
1/(exp(x00))
0.600829
exp(x01*(-0.377991))
0.587885
exp(x01*x01)
0.58218
exp(x01*x01)
0.578313
exp(x00*(-0.431963))
0.553994
exp(x00)**((-0.374301))
0.553305
((1.271180*3.141593)+(exp(-0.176681)/x00))
0.54959
(0.261200)**((0.389339+x01))
0.537744
((0.637926-0.111876))**((0.121642+x01))
0.534061
((1.079256-x01))**((x01+x01))
0.532799
sin(2.050547)**(x00)
0.531721
((1.079256-0.111876))**((1.564102+x01))
0.529022
(((1.564102+x01)-0.111876))**((1.564102+0.140389))
0.509393
exp(log(x00, 0.261200))
0.463367
(1/(x00)/((-0.180538)/(-0.578596)))
0.450962
((x01*x01)/log(1.233871))
0.406704
((x01*x01)/(x01+0.340636))
0.398586
((x01*(x01*x01))/log(1.233871))
0.389629
exp(exp(0.435222))
0.389404
exp(0.324928)
0.384995
exp(exp(-0.730430))
0.384383
(0.873070/log(1.233871))
0.380711
1/(exp(-0.176681))
0.377675
1/(-(-0.838660))
0.374376
(-(-1.060557))
0.372983
exp(-0.669970)
0.369476
exp((-0.284600)/(-2.653453))
0.369227
exp((-0.011305)/0.227621)
0.36636
(-(0.637926/(-1.428999)))
0.354263
((1.271180*0.252407)+0.116868)
0.344349
((1.079256-0.111876))**((0.252407+0.406792))
0.344114
(sin(-0.187363)/((-1.193145)/3.141593))
0.338589
(1/(1.060557)/(x00/(-0.578596)))
0.000378395
(0.435222/(x01*(-0.011019)))
2.1684e-19
(x01/((-1.193145)/0.334663))
2.1684e-19
1/(-0.651091)
2.1684e-19
exp(x00)
2.1684e-19
exp(exp(1.344039))
2.1684e-19
1/(1/(x01))
2.1684e-19
1/(x01)**(x00)
2.1684e-19
sin(1/(-0.642338))**(x00)
2.1684e-19
((0.661753/x01)/1.060557)
2.1684e-19
selection is done
crossover is done
mutation is done
(0.873070/log((-0.349298), 0.252183))
(((-x00)-0.111876))**((0.252407+0.406792))
exp(-0.987096)
1/(x00)
(3.141593)**(x00)
((x00-x00)+(exp(0.324928)/x00))
(sin(-0.187363)/(x00/0.611500))
((-0.317675))**(x00)
exp(log((x01*x00), 0.261200))
exp(1/(x01))
1/(-sin(-0.030010))
((1.271180*0.252407)+(x01/x00))
(x00)**((x01+0.140389))
exp((-1.317694)+x01)
(0.873070/x00)
sin(-1.365556)
exp(x01)
exp(x00)**((x00+x00))
(((1.564102+x01)-0.111876))**((1.564102+(x01/(-0.578596))))
((1.079256-x00))**((0.252407+x01))
exp(0.325664)
exp(0.407142/exp(x01))
(x00)**((1.079256+1.433612))
1/(log(x01))
1/(x01)
1/(-x00)
((x01*0.306626)/(-0.669970))
((x01*(-0.666951))/log(1.233871))
(((-0.838660)*x00)+(x01/x00))
exp(log(1.233871))**(0.147489)
(((-1.029967)*(x01*x01))/log(0.637926))
exp(x01)**((-0.374301))
((1.079256-0.111876))**((x00+1.060557))
exp(x00)
(x01)**((x01+x00))
exp((-0.850791)*(-0.730430))
sin(0.189794)
((1.271180*0.261200)+((-0.293606)*(-0.420401)))
exp(sin(sin(-0.285921)))
exp(x00*0.121642)
exp(sin(0.895688))
(x00)**(((2.718282/x00)+x01))
exp(log(x01))
exp((-0.519584)*x01)
((1.079256-x01))**((1.564102+x01))
((x01*(x01*(-0.377991)))+0.116868)
exp(x00*(-0.431963))
exp(x00)
1/(0.305291-x01)
exp(x00)
1 27
2 3
3 17
From C++ to C++ 32126
1.11254e-308
1.11254e-308
0.360357
0.478399
2.1684e-19
0.421663
0.00436776
0.0110717
2.1684e-19
1.11254e-308
2.1684e-19
0.961276
1.35865
0.507979
0.45625
2.1684e-19
0.601496
2.1684e-19
0.483009
2.1684e-19
0.380492
0.581489
2.1684e-19
2.1684e-19
2.1684e-19
2.1684e-19
0.395703
0.463071
2.1684e-19
0.357882
0.390752
0.580096
0.474433
2.1684e-19
2.1684e-19
0.373052
0.335194
0.331009
0.354724
2.1684e-19
0.383873
1.14648
2.1684e-19
0.58099
0.527541
0.412721
0.549776
2.1684e-19
0.619943
2.1684e-19
fitness is counted
the best are found
Algorithm is running for 89002 seconds

General 3

(x00)**((x01+0.140389))
1.35865
(x00)**(((2.718282/x00)+x01))
1.14648
((1.271180*0.252407)+(x01/x00))
0.961276
((1.271180*0.252407)+(x01/x00))
0.945976
(x00)**(((-0.775309)+x01))
0.793485
sin(x01)**(x00)
0.73161
1/(0.305291-x01)
0.619943
exp(x01)
0.617676
exp(x01)
0.615566
exp(x01)
0.608467
exp(1/(exp(x01)))
0.607983
1/(exp(x01))
0.603598
exp(x01)
0.601496
1/(exp(x00))
0.600829
exp(x01*(-0.377991))
0.587885
exp(x01*x01)
0.58218
exp(0.407142/exp(x01))
0.581489
exp((-0.519584)*x01)
0.58099
exp(x01)**((-0.374301))
0.580096
exp(x01*x01)
0.578313
exp(x00*(-0.431963))
0.553994
exp(x00)**((-0.374301))
0.553305
exp(x00*(-0.431963))
0.549776
((1.271180*3.141593)+(exp(-0.176681)/x00))
0.54959
(0.261200)**((0.389339+x01))
0.537744
((0.637926-0.111876))**((0.121642+x01))
0.534061
((1.079256-x01))**((x01+x01))
0.532799
sin(2.050547)**(x00)
0.531721
((1.079256-0.111876))**((1.564102+x01))
0.529022
((1.079256-x01))**((1.564102+x01))
0.527541
(((1.564102+x01)-0.111876))**((1.564102+0.140389))
0.509393
exp((-1.317694)+x01)
0.507979
(((1.564102+x01)-0.111876))**((1.564102+(x01/(-0.578596))))
0.483009
1/(x00)
0.478399
((1.079256-0.111876))**((x00+1.060557))
0.474433
exp(log(x00, 0.261200))
0.463367
((x01*(-0.666951))/log(1.233871))
0.463071
(0.873070/x00)
0.45625
(1/(x00)/((-0.180538)/(-0.578596)))
0.450962
((x00-x00)+(exp(0.324928)/x00))
0.421663
((x01*(x01*(-0.377991)))+0.116868)
0.412721
((x01*x01)/log(1.233871))
0.406704
((x01*x01)/(x01+0.340636))
0.398586
((x01*0.306626)/(-0.669970))
0.395703
(((-1.029967)*(x01*x01))/log(0.637926))
0.390752
((x01*(x01*x01))/log(1.233871))
0.389629
exp(exp(0.435222))
0.389404
exp(0.324928)
0.384995
exp(exp(-0.730430))
0.384383
exp(sin(0.895688))
0.383873
selection is done
crossover is done
mutation is done
((x01*1.393865)/1.564102)
(x00)**(cos(x01))
exp(sin(log((-0.733372))))
(x00)**(((-0.180538)+x01))
(x00)**(log(log(x00), log(1.429219, x01)))
(x00)**((sin(1.321006)+0.261200))
exp(x01)
1/(1/(-1.499987))
(0.261200)**((x01+(-0.669970)))
exp(x00*x00)
exp(x00*3.141593)
(1.564102/x00)
exp(-x01)
(x01)**(((-0.775309)+x01))
((x01*x01)+(exp(x01)/x00))
(0.261200)**((0.176968+x01))
((1.271180*3.141593)+((0.637926-x01)/x00))
exp(x01)
((x01*0.252407)+(0.637926-0.111876))
exp(x00)**(x00)
((x01)**((-0.374301))+(x01/x00))
exp((-0.418271)+x01)
(x00)**(sin(-0.104634))
1/(x00)
((x00/(-1.002832))/x00)
1/(0.305291-(0.407142/(x00*2.718282)))
((1.271180*3.141593)+(-(-0.448063)))
(log(x01)+(exp(x00)/x00))
exp(x00*x01)
exp(2.673060*x01)
(((2.718282/x00)+x01))**((0.474116+x01))
exp(x01)
((-1.427295))**((1.564102+x01))
1/(exp(x00)**(x00))
exp((-0.578596)*0.993539)
(x00)**(log(x00))
1/(-0.614076)
exp(-1.397817)
exp((-1.913420)/0.033582)
((1.271180*0.252407)+exp(1.311819))
(x00)**((x01+(-0.788924)))
((1.271180*0.252407)+(1.222187/x01))
exp(x01)**(x01)
exp(1.112342-x00)
((1.271180*3.141593)+(-(-0.312591)))
((-0.342916)+(exp(0.324928)/x00))
((1.271180*3.141593)+((0.291691*1.277044)/x00))
exp(x01*(-0.431963))
((1.903618*0.252407)+((-0.180538)/x00))
(0.821744)**(((2.718282/x00)+0.389339))
1 27
2 3
3 17
From C++ to C++ 38791
2.1684e-19
2.1684e-19
1.11254e-308
1.13245
1.11254e-308
2.1684e-19
0.612173
2.1684e-19
0.590919
2.1684e-19
2.1684e-19
0.469955
0.595803
2.1684e-19
0.683626
0.565705
1.15088
0.606489
0.516222
2.1684e-19
2.1684e-19
0.565899
0.558761
0.469944
2.1684e-19
0.535924
0.366667
2.1684e-19
1.42494
0.582807
0.841983
0.627488
1.11254e-308
2.1684e-19
0.354016
2.1684e-19
2.1684e-19
0.353348
0.296838
0.363991
0.843257
2.1684e-19
0.586146
0.623277
0.365903
2.1684e-19
0.531418
0.583662
0.505514
0.520417
fitness is counted
the best are found
Algorithm is running for 127793 seconds

General 4

exp(x00*x01)
1.42494
(x00)**((x01+0.140389))
1.35865
((1.271180*3.141593)+((0.637926-x01)/x00))
1.15088
(x00)**(((2.718282/x00)+x01))
1.14648
(x00)**(((-0.180538)+x01))
1.13245
((1.271180*0.252407)+(x01/x00))
0.961276
((1.271180*0.252407)+(x01/x00))
0.945976
(x00)**((x01+(-0.788924)))
0.843257
(((2.718282/x00)+x01))**((0.474116+x01))
0.841983
(x00)**(((-0.775309)+x01))
0.793485
sin(x01)**(x00)
0.73161
((x01*x01)+(exp(x01)/x00))
0.683626
exp(x01)
0.627488
exp(1.112342-x00)
0.623277
1/(0.305291-x01)
0.619943
exp(x01)
0.617676
exp(x01)
0.615566
exp(x01)
0.612173
exp(x01)
0.608467
exp(1/(exp(x01)))
0.607983
exp(x01)
0.606489
1/(exp(x01))
0.603598
exp(x01)
0.601496
1/(exp(x00))
0.600829
exp(-x01)
0.595803
(0.261200)**((x01+(-0.669970)))
0.590919
exp(x01*(-0.377991))
0.587885
exp(x01)**(x01)
0.586146
exp(x01*(-0.431963))
0.583662
exp(2.673060*x01)
0.582807
exp(x01*x01)
0.58218
exp(0.407142/exp(x01))
0.581489
exp((-0.519584)*x01)
0.58099
exp(x01)**((-0.374301))
0.580096
exp(x01*x01)
0.578313
exp((-0.418271)+x01)
0.565899
(0.261200)**((0.176968+x01))
0.565705
(x00)**(sin(-0.104634))
0.558761
exp(x00*(-0.431963))
0.553994
exp(x00)**((-0.374301))
0.553305
exp(x00*(-0.431963))
0.549776
((1.271180*3.141593)+(exp(-0.176681)/x00))
0.54959
(0.261200)**((0.389339+x01))
0.537744
1/(0.305291-(0.407142/(x00*2.718282)))
0.535924
((0.637926-0.111876))**((0.121642+x01))
0.534061
((1.079256-x01))**((x01+x01))
0.532799
sin(2.050547)**(x00)
0.531721
((1.271180*3.141593)+((0.291691*1.277044)/x00))
0.531418
((1.079256-0.111876))**((1.564102+x01))
0.529022
((1.079256-x01))**((1.564102+x01))
0.527541
selection is done
crossover is done
mutation is done
((-0.744453))**((x01+(-0.788924)))
(x01)**((x00+x01))
exp(((-0.519584)*x00)*x01)
sin(-1.201240)
exp(x00)
exp(-3.033059)
(x00)**(exp(x00))
(((2.718282/x00)+x01))**((-x01))
((1.271180*3.141593)+(1.159226/x00))
((x01*0.252407)+((-0.330964)/x00))
(x00)**(((2.718282/x00)+x00))
1/(-0.941879)
exp(1.985005)
((1.079256-1.271180))**(((-1.152435)+x01))
exp(2.050547)**(x01)
exp((-0.519584)*x00)
exp(x01*x00)
(exp(x01))**((x01+x01))
1/(1.023197*x01)
exp(0.280282*x01)
((1.079256-0.111876))**(0.497400)
exp(x01*(-0.431963))
exp(0.926501)
exp(log(x00))
(((-0.922393))**((-0.832866)))**((1.564102+x01))
((1.271180*(x00*x01))+(x00*(-1.030331)))
((-0.389547))**(3.141593)
exp(x01)
(0.261200)**((0.647946)**((-0.304796)))
exp(cos(1/(-0.115118)))
((1.079256-x01))**((x01+x01))
((1.271180*3.141593)+((0.408200+0.169757)/x01))
(x00)**(cos(0.586000))
((x00+x01))**((0.474116+x01))
exp(2.718282)
((1.271180*3.141593)+(x01/x01))
exp(((-0.539765)-0.111876))**(x01)
((-0.584289))**((x01+(-0.788924)))
exp(x00)
exp(x01)
exp(cos(log(3.133347, 0.594404)))
exp(x01/x00)
exp((-0.418271)+2.025047)
exp(x01-x01)
((1.079256-x01))**(((-0.479307)+x00))
exp(0.632691*x01)
(1.924126)**((x01+(-0.669970)))
exp(0.559286/exp(x01))
1/(1.079256-1.368667)
exp(1.929999+x01)
1 26
2 3
3 15
From C++ to C++ 34110
1.11254e-308
2.1684e-19
1.23849
2.1684e-19
2.1684e-19
0.28666
2.1684e-19
1.11664
0.563261
2.1684e-19
2.1684e-19
2.1684e-19
0.396524
1.11254e-308
0.58765
0.560205
1.37989
0.560075
2.1684e-19
0.581454
0.358211
0.584502
0.388069
2.1684e-19
1.11254e-308
2.1684e-19
1.11254e-308
0.610076
0.327238
0.354404
0.533553
2.1684e-19
2.1684e-19
1.35856
2.1684e-19
2.1684e-19
1.11254e-308
1.11254e-308
2.1684e-19
0.608272
0.34617
1.44057
0.382634
0.592258
2.1684e-19
0.579911
0.54447
0.582455
2.1684e-19
0.606837
fitness is counted
the best are found
Algorithm is running for 161903 seconds

General 5

exp(x01/x00)
1.44057
exp(x00*x01)
1.42494
exp(x01*x00)
1.37989
(x00)**((x01+0.140389))
1.35865
((x00+x01))**((0.474116+x01))
1.35856
exp(((-0.519584)*x00)*x01)
1.23849
((1.271180*3.141593)+((0.637926-x01)/x00))
1.15088
(x00)**(((2.718282/x00)+x01))
1.14648
(x00)**(((-0.180538)+x01))
1.13245
(((2.718282/x00)+x01))**((-x01))
1.11664
((1.271180*0.252407)+(x01/x00))
0.961276
((1.271180*0.252407)+(x01/x00))
0.945976
(x00)**((x01+(-0.788924)))
0.843257
(((2.718282/x00)+x01))**((0.474116+x01))
0.841983
(x00)**(((-0.775309)+x01))
0.793485
sin(x01)**(x00)
0.73161
((x01*x01)+(exp(x01)/x00))
0.683626
exp(x01)
0.627488
exp(1.112342-x00)
0.623277
1/(0.305291-x01)
0.619943
exp(x01)
0.617676
exp(x01)
0.615566
exp(x01)
0.612173
exp(x01)
0.610076
exp(x01)
0.608467
exp(x01)
0.608272
exp(1/(exp(x01)))
0.607983
exp(1.929999+x01)
0.606837
exp(x01)
0.606489
1/(exp(x01))
0.603598
exp(x01)
0.601496
1/(exp(x00))
0.600829
exp(-x01)
0.595803
exp(x01-x01)
0.592258
(0.261200)**((x01+(-0.669970)))
0.590919
exp(x01*(-0.377991))
0.587885
exp(2.050547)**(x01)
0.58765
exp(x01)**(x01)
0.586146
exp(x01*(-0.431963))
0.584502
exp(x01*(-0.431963))
0.583662
exp(2.673060*x01)
0.582807
exp(0.559286/exp(x01))
0.582455
exp(x01*x01)
0.58218
exp(0.407142/exp(x01))
0.581489
exp(0.280282*x01)
0.581454
exp((-0.519584)*x01)
0.58099
exp(x01)**((-0.374301))
0.580096
exp(0.632691*x01)
0.579911
exp(x01*x01)
0.578313
exp((-0.418271)+x01)
0.565899
selection is done
crossover is done
mutation is done
exp(0.407142/exp(x01/x00))
exp(x01*(-1.062781))
exp(-0.360024)
((1.271180*x01)+((x01-x01)/x00))
exp(x01/x00)
exp(-0.503828)
exp((-0.530286)*x01)
exp(1.029047)
exp(1.708237)
exp((-1.296236))**((-0.374301))
(log(1.221361)+((0.637926-x01)/x00))
(((2.718282/x01)+x01))**((-0.564063))
exp(x01+x01)
exp(x00-x00)
exp(x01)
(sin(0.571596))**((0.474116+x01))
((0.210598+((-0.418271)+x01)))**((0.474116+x01))
exp(x01*(-0.167197))
exp(2.718282/x00)
exp(0.637926+x00)
((x00*x00)+(x01/x00))
(((2.718282/x00)+x01))**(((-0.180538)+x01))
exp(x01*(-0.431963))
(x00)**(((2.718282/x00)+x01))
(x00)**((x00+x00))
exp(-0.843096)
exp((x01*0.489924)*x01)
(log(x00, x01)+((x01*x01)/x00))
((x01*x01))**(((2.718282/x00)+x00))
exp(-1.161332)
((x00+x01))**((((-0.205152)-x01)+x01))
(x00)**(((1.271180*x00)+(-0.788924)))
exp(x00-x01)
sin(x01)**(0.937417)
exp(x01)**((x01*(-0.343965)))
exp(x01)
(x01)**(((2.718282/x00)+x01))
exp(1.008671)
1/(exp(x01*(-0.431963)))
exp(x00)
exp((0.474116+x01)*(-0.289554))
exp(2.718282/x01)
exp(cos(x00)*x01)
exp((1.271180*x00)*(-0.431963))
exp(-0.441509)
(x01)**(((-0.180538)+x01))
(x01)**((0.474116+x00))
exp(-0.204723)
exp(x00/(-0.087500))
(x00)**((((x01*x00)/x00)+x01))
1 27
2 3
3 17
From C++ to C++ 37971
1.22246
0.577332
0.377195
2.1684e-19
1.35452
0.376018
0.577946
0.389995
0.398267
1.11254e-308
0.821201
2.1684e-19
0.588796
0.583716
0.606975
0.541354
1.11254e-308
0.580851
0.549774
2.1684e-19
2.1684e-19
1.06914
0.570725
1.10279
2.1684e-19
0.367035
0.538988
2.1684e-19
0.620993
0.352185
0.935279
2.1684e-19
2.1684e-19
2.1684e-19
0.535185
0.621626
2.1684e-19
0.391179
0.558755
2.1684e-19
0.542114
1.11254e-308
1.34892
0.532925
0.374428
2.1684e-19
2.1684e-19
0.374836
0.422966
1.00477
fitness is counted
the best are found
Algorithm is running for 199874 seconds

General 6

exp(x01/x00)
1.44057
exp(x00*x01)
1.42494
exp(x01*x00)
1.37989
(x00)**((x01+0.140389))
1.35865
((x00+x01))**((0.474116+x01))
1.35856
exp(x01/x00)
1.35452
exp(cos(x00)*x01)
1.34892
exp(((-0.519584)*x00)*x01)
1.23849
exp(0.407142/exp(x01/x00))
1.22246
((1.271180*3.141593)+((0.637926-x01)/x00))
1.15088
(x00)**(((2.718282/x00)+x01))
1.14648
(x00)**(((-0.180538)+x01))
1.13245
(((2.718282/x00)+x01))**((-x01))
1.11664
(x00)**(((2.718282/x00)+x01))
1.10279
(((2.718282/x00)+x01))**(((-0.180538)+x01))
1.06914
(x00)**((((x01*x00)/x00)+x01))
1.00477
((1.271180*0.252407)+(x01/x00))
0.961276
((1.271180*0.252407)+(x01/x00))
0.945976
((x00+x01))**((((-0.205152)-x01)+x01))
0.935279
(x00)**((x01+(-0.788924)))
0.843257
(((2.718282/x00)+x01))**((0.474116+x01))
0.841983
(log(1.221361)+((0.637926-x01)/x00))
0.821201
(x00)**(((-0.775309)+x01))
0.793485
sin(x01)**(x00)
0.73161
((x01*x01)+(exp(x01)/x00))
0.683626
exp(x01)
0.627488
exp(1.112342-x00)
0.623277
exp(x01)
0.621626
((x01*x01))**(((2.718282/x00)+x00))
0.620993
1/(0.305291-x01)
0.619943
exp(x01)
0.617676
exp(x01)
0.615566
exp(x01)
0.612173
exp(x01)
0.610076
exp(x01)
0.608467
exp(x01)
0.608272
exp(1/(exp(x01)))
0.607983
exp(x01)
0.606975
exp(1.929999+x01)
0.606837
exp(x01)
0.606489
1/(exp(x01))
0.603598
exp(x01)
0.601496
1/(exp(x00))
0.600829
exp(-x01)
0.595803
exp(x01-x01)
0.592258
(0.261200)**((x01+(-0.669970)))
0.590919
exp(x01+x01)
0.588796
exp(x01*(-0.377991))
0.587885
exp(2.050547)**(x01)
0.58765
exp(x01)**(x01)
0.586146
selection is done
crossover is done
mutation is done
exp(x00)
(log((-0.599653), x01))**(((2.718282/x00)+x00))
(x00)**(x01)
exp(-1.197815)
(x01+(exp(x01)/x00))
sin(0.172166)
exp(x00)
exp(0.637926*x00)
(x00)**((-0.264114))
1/(3.141593-x01)
((1.271180*0.252407)+(x01/0.690288))
(2.718282)**((((x01*x00)/x00)+x01))
((x01*x01)+(exp(x01)/x00))
(0.572944)**(1.271180)
exp(x00)
(2.718282)**(sin(-0.957627))
(exp(x01)+(1.224323-(-0.971381)))
(x00)**(x00)
(0.331496)**(((x01*x01)+x01))
1/(-0.169119)
(log(1.128308, 0.233664))**(((((-0.205152)-x01)/x00)+x00))
exp(sin(-0.677801))
((x01+x01))**((x01/0.954544))
exp(exp(1.252477))
exp(x00/x01)
exp(sin(x01))
1/(x01)
((x01*x01)+((0.637926-x01)/x01))
exp(exp(0.579833))
exp(2.718282)
((x01*0.252407)+x01)
(x00)**(((x01)**(x00)+x01))
sin(x00)
exp((x01/x00)*0.953846)
((1.271180*0.252407)+((x01/x00)/x00))
exp(x00*(-0.105794))
((x00+(-2.102102)))**((exp(x01)+x01))
((log(x01)+x01))**((0.474116+x01))
exp(x01*x00)
exp(x00*(-1.004686))
sin(x01)
exp(1.635839)
((log(x01)+x01))**(x00)
exp(1/(exp(x01))*(-1.145065))
(((-0.997320)/0.425290)+x01)
((x01*x01))**((x01*x01))
exp((0.474116+x01)*x00)
exp(0.403841)
exp(x01/x01)
1/(0.305291-(x00-(-1.174642)))
1 26
2 3
3 16
From C++ to C++ 26815
2.1684e-19
1.11254e-308
1.47416
0.352295
2.1684e-19
0.343491
2.1684e-19
2.1684e-19
0.545105
0.513357
0.479879
1.05063
0.705133
0.359493
2.1684e-19
0.34982
0.576661
2.1684e-19
0.533663
2.1684e-19
1.11254e-308
0.357925
2.1684e-19
2.1684e-19
1.11254e-308
0.587148
2.1684e-19
2.1684e-19
0.38749
0.401972
2.1684e-19
1.08631
2.1684e-19
1.23916
0.860637
0.525502
1.11254e-308
1.11254e-308
1.39249
0.581153
2.1684e-19
0.384072
2.1684e-19
0.492254
2.1684e-19
0.529527
2.1684e-19
0.384177
2.1684e-19
2.1684e-19
fitness is counted
the best are found
Algorithm is running for 226689 seconds

General 7

(x00)**(x01)
1.47416
exp(x01/x00)
1.44057
exp(x00*x01)
1.42494
exp(x01*x00)
1.39249
exp(x01*x00)
1.37989
(x00)**((x01+0.140389))
1.35865
((x00+x01))**((0.474116+x01))
1.35856
exp(x01/x00)
1.35452
exp(cos(x00)*x01)
1.34892
exp((x01/x00)*0.953846)
1.23916
exp(((-0.519584)*x00)*x01)
1.23849
exp(0.407142/exp(x01/x00))
1.22246
((1.271180*3.141593)+((0.637926-x01)/x00))
1.15088
(x00)**(((2.718282/x00)+x01))
1.14648
(x00)**(((-0.180538)+x01))
1.13245
(((2.718282/x00)+x01))**((-x01))
1.11664
(x00)**(((2.718282/x00)+x01))
1.10279
(x00)**(((x01)**(x00)+x01))
1.08631
(((2.718282/x00)+x01))**(((-0.180538)+x01))
1.06914
(2.718282)**((((x01*x00)/x00)+x01))
1.05063
(x00)**((((x01*x00)/x00)+x01))
1.00477
((1.271180*0.252407)+(x01/x00))
0.961276
((1.271180*0.252407)+(x01/x00))
0.945976
((x00+x01))**((((-0.205152)-x01)+x01))
0.935279
((1.271180*0.252407)+((x01/x00)/x00))
0.860637
(x00)**((x01+(-0.788924)))
0.843257
(((2.718282/x00)+x01))**((0.474116+x01))
0.841983
(log(1.221361)+((0.637926-x01)/x00))
0.821201
(x00)**(((-0.775309)+x01))
0.793485
sin(x01)**(x00)
0.73161
((x01*x01)+(exp(x01)/x00))
0.705133
((x01*x01)+(exp(x01)/x00))
0.683626
exp(x01)
0.627488
exp(1.112342-x00)
0.623277
exp(x01)
0.621626
((x01*x01))**(((2.718282/x00)+x00))
0.620993
1/(0.305291-x01)
0.619943
exp(x01)
0.617676
exp(x01)
0.615566
exp(x01)
0.612173
exp(x01)
0.610076
exp(x01)
0.608467
exp(x01)
0.608272
exp(1/(exp(x01)))
0.607983
exp(x01)
0.606975
exp(1.929999+x01)
0.606837
exp(x01)
0.606489
1/(exp(x01))
0.603598
exp(x01)
0.601496
1/(exp(x00))
0.600829
selection is done
crossover is done
mutation is done
exp(0.765650)
exp(2.689209+(-0.788924))
exp(log(x01, 0.408363))
(x01)**(x00)
(x00)**(x01)
exp(0.407142/exp(x00))
exp(-cos(exp(-log((-1.173049), x01))))
(x01+log((-0.247677)))
((1.271180*3.141593)+((x01-0.644907)/x00))
(((2.718282/x00)+x01))**(((x01/(-0.273574))+x01))
exp(x00)
(x00)**((((x01/x00)/x00)+(-0.308798)))
(x01)**((x01+0.902085))
exp(x01)
exp((log(1.221361)*x00)*x00)
exp(x00*x00)
((x00*(-0.347985))+(x01/x00))
exp(x01*x00)
(0.441686)**((x01+(-0.788924)))
exp(x01)
((x01*x01))**((((x00+x01)/x00)+x00))
exp(-0.605108)
(2.718282)**(((1.271180*x01)+x01))
(x01)**((0.207455+x01))
exp(x00)
exp(x01)**((x01)**((-0.032527)))
(x00)**((((0.637926-x01))**(x00)+(-0.290976)))
exp(1.504919+(-0.788924))
exp((x01)**((-1.388524))*x00)
(2.718282)**(((exp(-(-0.769426))/x00)+x01))
((((x01/x00)/x00)*3.141593)+(x01/x00))
exp(x01)
exp(3.141593)
((x00+x01))**((((-0.205152)-x01)+x00))
exp((x01/x00)+x01)
sin(0.258448)**(x00)
(((2.718282/x01)+x01))**((0.935398+x01))
exp(0.218915)**((x01)**((-0.938947)))
(((-0.205152)-2.718282))**((-x01))
exp(exp(cos(sin(x00)*((-0.880498)/x01))))
exp(1.929999+((2.718282/(-0.151852))+x01))
exp(exp(x01))
exp(sin(x00))
exp(0.230628)
((x00+x01))**((0.474116+(-(-0.788903))))
(((x01*x01)*0.252407)+log((x00)**(x01), x00))
exp(x01)
(x00)**(x00)
(x00)**(exp(1/(x00)))
((x00+(-0.656126)))**((((-0.205152)-x01)+x01))
1 26
2 3
3 16
From C++ to C++ 32186
0.388132
0.375527
2.1684e-19
0.763883
1.49336
0.555877
1.11254e-308
1.11254e-308
1.06951
0.930415
2.1684e-19
0.878109
2.1684e-19
0.616995
2.1684e-19
2.1684e-19
2.1684e-19
1.38041
0.578362
0.613692
0.580761
0.367014
0.532595
2.1684e-19
2.1684e-19
2.1684e-19
0.863796
0.370232
1.11254e-308
0.927966
0.584057
0.602792
0.400947
2.1684e-19
1.15526
0.560548
2.1684e-19
2.1684e-19
1.11254e-308
2.1684e-19
0.391144
0.633756
0.673871
0.383067
2.1684e-19
1.11254e-308
0.599477
2.1684e-19
2.1684e-19
0.914811
fitness is counted
the best are found
Algorithm is running for 258875 seconds

General 8

(x00)**(x01)
1.49336
(x00)**(x01)
1.47416
exp(x01/x00)
1.44057
exp(x00*x01)
1.42494
exp(x01*x00)
1.39249
exp(x01*x00)
1.38041
exp(x01*x00)
1.37989
(x00)**((x01+0.140389))
1.35865
((x00+x01))**((0.474116+x01))
1.35856
exp(x01/x00)
1.35452
exp(cos(x00)*x01)
1.34892
exp((x01/x00)*0.953846)
1.23916
exp(((-0.519584)*x00)*x01)
1.23849
exp(0.407142/exp(x01/x00))
1.22246
exp((x01/x00)+x01)
1.15526
((1.271180*3.141593)+((0.637926-x01)/x00))
1.15088
(x00)**(((2.718282/x00)+x01))
1.14648
(x00)**(((-0.180538)+x01))
1.13245
(((2.718282/x00)+x01))**((-x01))
1.11664
(x00)**(((2.718282/x00)+x01))
1.10279
(x00)**(((x01)**(x00)+x01))
1.08631
((1.271180*3.141593)+((x01-0.644907)/x00))
1.06951
(((2.718282/x00)+x01))**(((-0.180538)+x01))
1.06914
(2.718282)**((((x01*x00)/x00)+x01))
1.05063
(x00)**((((x01*x00)/x00)+x01))
1.00477
((1.271180*0.252407)+(x01/x00))
0.961276
((1.271180*0.252407)+(x01/x00))
0.945976
((x00+x01))**((((-0.205152)-x01)+x01))
0.935279
(((2.718282/x00)+x01))**(((x01/(-0.273574))+x01))
0.930415
(2.718282)**(((exp(-(-0.769426))/x00)+x01))
0.927966
((x00+(-0.656126)))**((((-0.205152)-x01)+x01))
0.914811
(x00)**((((x01/x00)/x00)+(-0.308798)))
0.878109
(x00)**((((0.637926-x01))**(x00)+(-0.290976)))
0.863796
((1.271180*0.252407)+((x01/x00)/x00))
0.860637
(x00)**((x01+(-0.788924)))
0.843257
(((2.718282/x00)+x01))**((0.474116+x01))
0.841983
(log(1.221361)+((0.637926-x01)/x00))
0.821201
(x00)**(((-0.775309)+x01))
0.793485
(x01)**(x00)
0.763883
sin(x01)**(x00)
0.73161
((x01*x01)+(exp(x01)/x00))
0.705133
((x01*x01)+(exp(x01)/x00))
0.683626
exp(sin(x00))
0.673871
exp(exp(x01))
0.633756
exp(x01)
0.627488
exp(1.112342-x00)
0.623277
exp(x01)
0.621626
((x01*x01))**(((2.718282/x00)+x00))
0.620993
1/(0.305291-x01)
0.619943
exp(x01)
0.617676
selection is done
crossover is done
mutation is done
((x01*0.700740)+(exp(x01)/x00))
(x00)**(0.322150)
exp(sin(3.141593))
exp(log((-0.346392), 2.443602))
((x01*x01)+(exp(1.708749)/x00))
(x00)**(((-1.151908)*0.200065))
(x00)**(((x01)**((-1.158176))+x01))
(((-0.349426)*0.252407)+((x01/(-0.308798))/x00))
exp((x00*x01)/x00)
exp(-0.372206)
((1.271180*3.141593)+((0.637926-1/(x00))/x00))
exp(log((-x00))+x01)
(((2.718282/x01)+x01))**(((-0.180538)+x00))
exp(x01)
(x01)**((x00+x01))
(2.718282)**((((x00*x00)/x00)+x00))
(x00)**((log((-1.819732))+x01))
((exp(x01/x01)*3.141593)+((0.637926-x01)/x00))
exp(((-0.519584)*x00)/exp(x01/0.734910))
((x01/x00))**((x01/x00))
(x01)**((-0.008123))
(1.271180)**(x00)
(x00)**((x01+x00))
exp(cos(-1.859060))
(((0.407142/exp(x01/x00))*x01)+(exp(x01)/x00))
(x01)**(((-0.775309)+x01))
exp(((-0.830560)/x00)*x00)
((x01*(-0.740718))+(exp(x00)/x00))
sin((x00*x00))**(x00)
exp(x00)
(x00)**(((-0.904650)/(-0.697580)))
((-0.892168))**((((0.637926-x01))**(x00)+(-0.205152)))
(0.378418)**(x00)
(2.718282)**((-0.638609))
(x00)**(((2.718282/((x01*x00)/x00))+x01))
(x00)**(((-x00)+x01))
((x00+x01))**((((-0.205152)-(-0.775309))+2.115212))
exp(exp(0.967312))
(x00)**((((0.407142*x00)/x00)+x01))
((x00+x01))**((sin(x00)+x01))
(x00)**(((2.718282)**(x00)+(-0.290976)))
((x01/x00))**((x01-x00))
(((x01/(-0.273574))*x01)+(x01/x00))
((x01*x01))**(x01)
(x01)**(1.694678)
((x01*1.795710)+(exp(x00)/x00))
(1.803159)**(((-0.180538)+x01))
((x00)**((-0.106925)))**((((x01/x00)/x00)+(-0.308798)))
(((x01/x01)/x00))**((x01+(-0.788924)))
((x01+x01))**(((cos(x00)*x01)+x01))
1 27
2 3
3 16
From C++ to C++ 28271
2.1684e-19
0.649451
0.371206
1.11254e-308
0.776761
0.529551
2.1684e-19
2.1684e-19
1.23451
0.374869
0.512338
1.11254e-308
2.1684e-19
0.615601
2.1684e-19
2.1684e-19
1.11254e-308
2.1684e-19
0.976264
2.1684e-19
2.1684e-19
2.1684e-19
2.1684e-19
0.364414
2.1684e-19
2.1684e-19
0.512287
2.1684e-19
0.0197997
2.1684e-19
2.1684e-19
1.11254e-308
0.594696
0.362144
2.1684e-19
1.39245
2.1684e-19
2.1684e-19
1.17426
2.1684e-19
2.1684e-19
2.1684e-19
0.616413
0.576136
2.1684e-19
2.1684e-19
0.562849
0.941418
2.1684e-19
2.1684e-19
fitness is counted
the best are found
Algorithm is running for 287146 seconds

General 9

(x00)**(x01)
1.49336
(x00)**(x01)
1.47416
exp(x01/x00)
1.44057
exp(x00*x01)
1.42494
exp(x01*x00)
1.39249
(x00)**(((-x00)+x01))
1.39245
exp(x01*x00)
1.38041
exp(x01*x00)
1.37989
(x00)**((x01+0.140389))
1.35865
((x00+x01))**((0.474116+x01))
1.35856
exp(x01/x00)
1.35452
exp(cos(x00)*x01)
1.34892
exp((x01/x00)*0.953846)
1.23916
exp(((-0.519584)*x00)*x01)
1.23849
exp((x00*x01)/x00)
1.23451
exp(0.407142/exp(x01/x00))
1.22246
(x00)**((((0.407142*x00)/x00)+x01))
1.17426
exp((x01/x00)+x01)
1.15526
((1.271180*3.141593)+((0.637926-x01)/x00))
1.15088
(x00)**(((2.718282/x00)+x01))
1.14648
(x00)**(((-0.180538)+x01))
1.13245
(((2.718282/x00)+x01))**((-x01))
1.11664
(x00)**(((2.718282/x00)+x01))
1.10279
(x00)**(((x01)**(x00)+x01))
1.08631
((1.271180*3.141593)+((x01-0.644907)/x00))
1.06951
(((2.718282/x00)+x01))**(((-0.180538)+x01))
1.06914
(2.718282)**((((x01*x00)/x00)+x01))
1.05063
(x00)**((((x01*x00)/x00)+x01))
1.00477
exp(((-0.519584)*x00)/exp(x01/0.734910))
0.976264
((1.271180*0.252407)+(x01/x00))
0.961276
((1.271180*0.252407)+(x01/x00))
0.945976
((x00)**((-0.106925)))**((((x01/x00)/x00)+(-0.308798)))
0.941418
((x00+x01))**((((-0.205152)-x01)+x01))
0.935279
(((2.718282/x00)+x01))**(((x01/(-0.273574))+x01))
0.930415
(2.718282)**(((exp(-(-0.769426))/x00)+x01))
0.927966
((x00+(-0.656126)))**((((-0.205152)-x01)+x01))
0.914811
(x00)**((((x01/x00)/x00)+(-0.308798)))
0.878109
(x00)**((((0.637926-x01))**(x00)+(-0.290976)))
0.863796
((1.271180*0.252407)+((x01/x00)/x00))
0.860637
(x00)**((x01+(-0.788924)))
0.843257
(((2.718282/x00)+x01))**((0.474116+x01))
0.841983
(log(1.221361)+((0.637926-x01)/x00))
0.821201
(x00)**(((-0.775309)+x01))
0.793485
((x01*x01)+(exp(1.708749)/x00))
0.776761
(x01)**(x00)
0.763883
sin(x01)**(x00)
0.73161
((x01*x01)+(exp(x01)/x00))
0.705133
((x01*x01)+(exp(x01)/x00))
0.683626
exp(sin(x00))
0.673871
(x00)**(0.322150)
0.649451
selection is done
crossover is done
mutation is done
exp((sin(0.466429)/x00)/x00)
(x01)**((-x01))
exp((0.067909/x00)/x00)
(0.154249+(x01/x00))
exp(1/(-0.704134))
(x00)**(x00)
((x00*3.141593)+((0.637926-x01)/x00))
(((2.718282/0.157566)+x01))**((-x01))
(x00)**((((x01*0.320650)/x00)+x01))
exp(x00/cos(x00))
(x00)**((((x01)**(x01))**((-1.330689))+x01))
((((x01/x00)+x01)*0.252407)+(x01/x00))
(x00+((x01/x00)/x00))
exp(cos(cos(x00*x00)))
(x00)**((((0.407142*x00)/x01)+x00))
exp(x00)
(x01+(x01/(-0.420588)))
((-0.918624))**(x00)
exp(x00*x00)
(x00)**(((x00-x00))**(x01))
exp(x01*(-1.750080))
((((-0.519584)*x00)/exp(x01/0.734910)))**(3.141593)
exp((x00+(-1.342787))*1/(x01))
((1.271180*3.141593)+1/(-x01))
(x00)**(log(log(2.357931)))
(x00)**((x00+x01))
((x00)**((-0.106925)))**(0.804873)
(x00)**((x00+x01))
exp((x00/0.326056)+x01)
exp((-1.103291)/exp(x01))
exp((x00+x00)+x00)
exp(x01)
(x00)**(((-0.180538)+0.583804))
((x00+(-0.656126)))**((x01/x00))
((2.718282*x01)+(exp(1.708749)/(x00+(-0.656126))))
(((2.718282/x01)+x01))**(((x01/x00)+x01))
((1.271180*0.252407)+((-0.927259)/x00))
(1.662296)**(((x01/x00)+x01))
exp(x00*x01)
(x00)**((x01*x00))
exp((-x01)*0.953846)
(x00)**(x00)
exp(x01)
(((2.718282/((2.718282/x00)+x01))+x01))**(((-0.180538)+x01))
(x00)**((((x01/x00)/0.322150)+(-0.308798)))
(1/(x00)+((0.637926-x00)/x00))
((1.271180*x01)+(((0.637926-x01))**(x00)+(-0.290976)))
(x00)**((x00*x01))
exp(1/(x00))
((x00+(-0.656126)))**((1/(x00)+x01))
1 28
2 3
3 18
From C++ to C++ 31225
0.528186
2.1684e-19
0.55057
0.899124
0.337617
2.1684e-19
2.1684e-19
0.524272
1.02267
2.1684e-19
2.1684e-19
2.1684e-19
2.1684e-19
0.583362
2.1684e-19
2.1684e-19
2.1684e-19
2.1684e-19
2.1684e-19
2.1684e-19
0.567947
1.11254e-308
2.1684e-19
2.1684e-19
0.530583
2.1684e-19
0.549541
2.1684e-19
2.1684e-19
0.510002
2.1684e-19
0.604744
0.610447
1.18309
2.1684e-19
2.1684e-19
0.440202
1.18868
1.45784
1.2495
0.563911
2.1684e-19
0.617658
0.767092
0.868745
2.1684e-19
2.1684e-19
1.23604
0.589418
1.08838
fitness is counted
the best are found
Algorithm is running for 318371 seconds

General 10

(x00)**(x01)
1.49336
(x00)**(x01)
1.47416
exp(x00*x01)
1.45784
exp(x01/x00)
1.44057
exp(x00*x01)
1.42494
exp(x01*x00)
1.39249
(x00)**(((-x00)+x01))
1.39245
exp(x01*x00)
1.38041
exp(x01*x00)
1.37989
(x00)**((x01+0.140389))
1.35865
((x00+x01))**((0.474116+x01))
1.35856
exp(x01/x00)
1.35452
exp(cos(x00)*x01)
1.34892
(x00)**((x01*x00))
1.2495
exp((x01/x00)*0.953846)
1.23916
exp(((-0.519584)*x00)*x01)
1.23849
(x00)**((x00*x01))
1.23604
exp((x00*x01)/x00)
1.23451
exp(0.407142/exp(x01/x00))
1.22246
(1.662296)**(((x01/x00)+x01))
1.18868
((x00+(-0.656126)))**((x01/x00))
1.18309
(x00)**((((0.407142*x00)/x00)+x01))
1.17426
exp((x01/x00)+x01)
1.15526
((1.271180*3.141593)+((0.637926-x01)/x00))
1.15088
(x00)**(((2.718282/x00)+x01))
1.14648
(x00)**(((-0.180538)+x01))
1.13245
(((2.718282/x00)+x01))**((-x01))
1.11664
(x00)**(((2.718282/x00)+x01))
1.10279
((x00+(-0.656126)))**((1/(x00)+x01))
1.08838
(x00)**(((x01)**(x00)+x01))
1.08631
((1.271180*3.141593)+((x01-0.644907)/x00))
1.06951
(((2.718282/x00)+x01))**(((-0.180538)+x01))
1.06914
(2.718282)**((((x01*x00)/x00)+x01))
1.05063
(x00)**((((x01*0.320650)/x00)+x01))
1.02267
(x00)**((((x01*x00)/x00)+x01))
1.00477
exp(((-0.519584)*x00)/exp(x01/0.734910))
0.976264
((1.271180*0.252407)+(x01/x00))
0.961276
((1.271180*0.252407)+(x01/x00))
0.945976
((x00)**((-0.106925)))**((((x01/x00)/x00)+(-0.308798)))
0.941418
((x00+x01))**((((-0.205152)-x01)+x01))
0.935279
(((2.718282/x00)+x01))**(((x01/(-0.273574))+x01))
0.930415
(2.718282)**(((exp(-(-0.769426))/x00)+x01))
0.927966
((x00+(-0.656126)))**((((-0.205152)-x01)+x01))
0.914811
(0.154249+(x01/x00))
0.899124
(x00)**((((x01/x00)/x00)+(-0.308798)))
0.878109
(x00)**((((x01/x00)/0.322150)+(-0.308798)))
0.868745
(x00)**((((0.637926-x01))**(x00)+(-0.290976)))
0.863796
((1.271180*0.252407)+((x01/x00)/x00))
0.860637
(x00)**((x01+(-0.788924)))
0.843257
(((2.718282/x00)+x01))**((0.474116+x01))
0.841983
selection is done
crossover is done
mutation is done
((-1.242485))**(x00)
((1.271180*x01)+(0.407142*x00))
((x00+0.155485))**(((-0.180538)+x01))
exp(x01)
exp(x01)
exp((x01/0.329972)*0.953846)
exp(0.240433+(-0.656126))
(1.662296)**(((x00/(2.718282/x00))+x01))
(x00)**(((-x00)+x01))
(2.662967)**(((exp(-((x01*x00)/x00))/x00)+x01))
(x00)**(((x01/(-0.273574))+x00))
(x01)**(exp(log(0.649251)))
((-0.326862)+(x01/x00))
(x00)**((1/(log(x00, x01))+x00))
(x00)**(((x01)**(x00)+(-0.290976)))
exp((x01/((-1.709581)+0.208201))*0.953846)
(x00)**((1.862680-(-0.288126)))
(x01)**(x00)
exp(0.818047)
(((x01)**(x00)+x01))**((((0.471977-x01))**(x00)+(-0.290976)))
(2.718282)**(log((log(x01, (-0.522350))*1.656968)))
exp(exp(-0.085640))
(x00)**(x01)
exp(((-0.519584)*x00)/exp(x00*x01))
exp(x00+x00)
((x00)**((-0.106925)))**(sin(log(1/(-1.135188), log(x00))))
(x00)**((((x01/x00)/0.322150)+x00))
((x00+(-0.656126)))**((x01/(x00*x00)))
(x00)**(1.802607)
exp(x01)
(x00)**((((x01*0.320650)/((x00*x01)/x00))+x00))
(x00)**(x01)
exp(0.407142/(3.141593-x01))
exp(0.864649)
((cos(1.608724)+x01))**(((-0.180538)+x01))
(x01)**((x01*x00))
((x00+x01))**(((x01+0.916289)+x01))
exp(x00/x00)
(x00)**(((1/(-0.409882)/0.322150)+x00))
((1.271180*3.141593)+sin(sin(2.718282)))
(1.070894)**(0.407142)
((x00+x01))**(sin(1/(cos(cos(sin(x01))))))
(x00+(x01/x00))
(x00)**((0.118039)**(x01))
(2.718282)**(((1/(x01)/x00)+x00))
((x00+(-0.656126)))**(((x00-(0.407142/exp(x01/x00)))+x01))
(((2.718282/x00)+1.050059))**((x01+x01))
exp(x01*0.125394)
(x00)**(sin(x00+1.373773))
(((2.718282/x00))**((-0.106925)))**((((x01/x00)/x00)+x00))
1 26
2 3
3 16
From C++ to C++ 33046
2.1684e-19
2.1684e-19
1.04416
0.624824
0.622027
0.539722
0.363595
2.1684e-19
1.37938
0.814332
2.1684e-19
2.1684e-19
2.1684e-19
1.11254e-308
0.936909
0.51889
2.1684e-19
0.760473
0.391527
2.1684e-19
1.11254e-308
0.383516
1.47101
0.968462
2.1684e-19
1.11254e-308
2.1684e-19
1.03241
2.1684e-19
0.623637
2.1684e-19
1.51112
0.556144
0.385923
1.11254e-308
2.1684e-19
2.1684e-19
0.598353
2.1684e-19
0.360038
0.365834
2.1684e-19
2.1684e-19
2.1684e-19
1.11254e-308
2.1684e-19
1.05601
0.568271
0.648813
2.1684e-19
fitness is counted
the best are found
Algorithm is running for 351417 seconds

General 11

(x00)**(x01)
1.51112
(x00)**(x01)
1.49336
(x00)**(x01)
1.47416
(x00)**(x01)
1.47101
exp(x00*x01)
1.45784
exp(x01/x00)
1.44057
exp(x00*x01)
1.42494
exp(x01*x00)
1.39249
(x00)**(((-x00)+x01))
1.39245
exp(x01*x00)
1.38041
exp(x01*x00)
1.37989
(x00)**(((-x00)+x01))
1.37938
(x00)**((x01+0.140389))
1.35865
((x00+x01))**((0.474116+x01))
1.35856
exp(x01/x00)
1.35452
exp(cos(x00)*x01)
1.34892
(x00)**((x01*x00))
1.2495
exp((x01/x00)*0.953846)
1.23916
exp(((-0.519584)*x00)*x01)
1.23849
(x00)**((x00*x01))
1.23604
exp((x00*x01)/x00)
1.23451
exp(0.407142/exp(x01/x00))
1.22246
(1.662296)**(((x01/x00)+x01))
1.18868
((x00+(-0.656126)))**((x01/x00))
1.18309
(x00)**((((0.407142*x00)/x00)+x01))
1.17426
exp((x01/x00)+x01)
1.15526
((1.271180*3.141593)+((0.637926-x01)/x00))
1.15088
(x00)**(((2.718282/x00)+x01))
1.14648
(x00)**(((-0.180538)+x01))
1.13245
(((2.718282/x00)+x01))**((-x01))
1.11664
(x00)**(((2.718282/x00)+x01))
1.10279
((x00+(-0.656126)))**((1/(x00)+x01))
1.08838
(x00)**(((x01)**(x00)+x01))
1.08631
((1.271180*3.141593)+((x01-0.644907)/x00))
1.06951
(((2.718282/x00)+x01))**(((-0.180538)+x01))
1.06914
(((2.718282/x00)+1.050059))**((x01+x01))
1.05601
(2.718282)**((((x01*x00)/x00)+x01))
1.05063
((x00+0.155485))**(((-0.180538)+x01))
1.04416
((x00+(-0.656126)))**((x01/(x00*x00)))
1.03241
(x00)**((((x01*0.320650)/x00)+x01))
1.02267
(x00)**((((x01*x00)/x00)+x01))
1.00477
exp(((-0.519584)*x00)/exp(x01/0.734910))
0.976264
exp(((-0.519584)*x00)/exp(x00*x01))
0.968462
((1.271180*0.252407)+(x01/x00))
0.961276
((1.271180*0.252407)+(x01/x00))
0.945976
((x00)**((-0.106925)))**((((x01/x00)/x00)+(-0.308798)))
0.941418
(x00)**(((x01)**(x00)+(-0.290976)))
0.936909
((x00+x01))**((((-0.205152)-x01)+x01))
0.935279
(((2.718282/x00)+x01))**(((x01/(-0.273574))+x01))
0.930415
(2.718282)**(((exp(-(-0.769426))/x00)+x01))
0.927966
selection is done
crossover is done
mutation is done
exp((0.597830-(-0.982392))/exp(x01))
(((2.718282/((x01/x00)+x01))+x01))**(((-0.180538)+x01))
(x00)**(((x01-x01)+x01))
(log(cos(-0.222302), (x00+(-0.109640))))**(((x00/(-0.273574))+x01))
exp(((-0.172518))**(0.662891)/log(x01))
(x01)**(x00)
(x01)**((x00+x01))
(x00)**(((-0.021753)+x01))
(1.662296)**(((1.029992/x00)+x01))
(x00)**((x00*0.406712))
exp(-2.718282)
((x00+0.155485))**((0.107431+x01))
exp(x01*x00)
(2.718282)**(((exp(x00)/x00)+x01))
((x01+0.140389))**(((0.664178-x01)+x01))
((x00*3.141593)+(x00/x00))
(x00)**(((2.718282/x00)+x00))
exp(log(x00, x00)*0.953846)
exp((x01*x00)*x01)
(x00)**(x00)
((1.271180*x01)+x00)
(x00)**(exp(log(log(x01), exp(0.029105))))
(x00)**((0.407142/exp(x00/x00)))
(x00)**((((x01*x01)/x01)+x01))
(x01)**(x01)
(2.718282)**((((x01*(-1.440133))/x00)+(x00*x01)))
(x01)**((x01*x00))
(x00)**(((-((x01/x01)+x01))+x01))
exp(((-x00)/x00)+0.424326)
(x00)**(((-0.170112)+(-0.656126)))
(1.662296)**(((x01/x00)+x01))
exp(x01)
exp(0.753308)
((x00+x01))**(x00)
exp(0.362443)
(x00)**((((0.407142*x00)/x00)+exp(x01)))
exp(x00*cos(0.319543))
(((2.718282/(log(1/(0.620144), sin(-0.966702)))**((-0.979795)))+x01))**((-x01))
exp(log((-0.317623), x00))
(((-0.997661)/x00))**(x01)
(1/(x00))**(x00)
exp(log(x01, x00)/exp(x00*((-x00)+x01)))
exp((x00/x00)*x01)
(log(x01, ((-1.925852))**(x00)))**((x01+2.718282))
((x00+(-0.692865)))**((0.474116+(-0.180538)))
(((-1.144158)+(-0.656126)))**((x01/x00))
(x00)**((-x01))
(x00)**(((2.718282)**(1.032285)+(-0.290976)))
((-x01))**(((1.271180*0.252407)+x01))
exp(((-0.519584)*x00)*x01)
1 23
2 3
3 14
From C++ to C++ 24700
0.566036
2.1684e-19
1.08755
2.1684e-19
1.11254e-308
0.763071
2.1684e-19
1.18797
1.17468
2.1684e-19
0.296495
1.17707
1.37476
2.1684e-19
0.461561
2.1684e-19
2.1684e-19
1.11254e-308
1.17589
2.1684e-19
2.1684e-19
1.11254e-308
0.544847
2.1684e-19
2.1684e-19
0.907766
2.1684e-19
2.1684e-19
0.510078
0.451876
1.15338
0.616338
0.388029
2.1684e-19
0.3847
2.1684e-19
2.1684e-19
1.11254e-308
1.11254e-308
1.11254e-308
0.616847
1.11254e-308
1.25285
1.11254e-308
0.560847
1.11254e-308
1.36105
2.1684e-19
1.11254e-308
1.21294
fitness is counted
the best are found
Algorithm is running for 376117 seconds

General 12

(x00)**(x01)
1.51112
(x00)**(x01)
1.49336
(x00)**(x01)
1.47416
(x00)**(x01)
1.47101
exp(x00*x01)
1.45784
exp(x01/x00)
1.44057
exp(x00*x01)
1.42494
exp(x01*x00)
1.39249
(x00)**(((-x00)+x01))
1.39245
exp(x01*x00)
1.38041
exp(x01*x00)
1.37989
(x00)**(((-x00)+x01))
1.37938
exp(x01*x00)
1.37476
(x00)**((-x01))
1.36105
(x00)**((x01+0.140389))
1.35865
((x00+x01))**((0.474116+x01))
1.35856
exp(x01/x00)
1.35452
exp(cos(x00)*x01)
1.34892
exp((x00/x00)*x01)
1.25285
(x00)**((x01*x00))
1.2495
exp((x01/x00)*0.953846)
1.23916
exp(((-0.519584)*x00)*x01)
1.23849
(x00)**((x00*x01))
1.23604
exp((x00*x01)/x00)
1.23451
exp(0.407142/exp(x01/x00))
1.22246
exp(((-0.519584)*x00)*x01)
1.21294
(1.662296)**(((x01/x00)+x01))
1.18868
(x00)**(((-0.021753)+x01))
1.18797
((x00+(-0.656126)))**((x01/x00))
1.18309
((x00+0.155485))**((0.107431+x01))
1.17707
exp((x01*x00)*x01)
1.17589
(1.662296)**(((1.029992/x00)+x01))
1.17468
(x00)**((((0.407142*x00)/x00)+x01))
1.17426
exp((x01/x00)+x01)
1.15526
(1.662296)**(((x01/x00)+x01))
1.15338
((1.271180*3.141593)+((0.637926-x01)/x00))
1.15088
(x00)**(((2.718282/x00)+x01))
1.14648
(x00)**(((-0.180538)+x01))
1.13245
(((2.718282/x00)+x01))**((-x01))
1.11664
(x00)**(((2.718282/x00)+x01))
1.10279
((x00+(-0.656126)))**((1/(x00)+x01))
1.08838
(x00)**(((x01-x01)+x01))
1.08755
(x00)**(((x01)**(x00)+x01))
1.08631
((1.271180*3.141593)+((x01-0.644907)/x00))
1.06951
(((2.718282/x00)+x01))**(((-0.180538)+x01))
1.06914
(((2.718282/x00)+1.050059))**((x01+x01))
1.05601
(2.718282)**((((x01*x00)/x00)+x01))
1.05063
((x00+0.155485))**(((-0.180538)+x01))
1.04416
((x00+(-0.656126)))**((x01/(x00*x00)))
1.03241
(x00)**((((x01*0.320650)/x00)+x01))
1.02267
selection is done
crossover is done
mutation is done
(x00)**(((-x00)+x01))
exp(x01*x01)
exp((-0.180538)/0.870387)
exp(1/(-1.071421))
(0.163481)**(((-x01)+x01))
((1.305572+(0.407142/exp(x01/x00))))**((0.107431+x01))
exp(x01*((x01/(-1.128291))+x01))
(x00)**((0.176962*x01))
(x00)**(x01)
exp((x00*x00)*x01)
(x00)**(x01)
(x00)**((log(1.258572, x01)+x01))
exp(x01*x01)
exp(0.684134-x00)
(((-x01)+1.050059))**((0.385410+x01))
exp((-0.475476)*x01)
(((-(-0.251121))+x01))**(((-0.180538)+x01))
exp(x01*1.365792)
exp(0.407142*(-0.305233))
(1/(x00)+((x01-0.337329)/x00))
exp(1/((-0.393033)*0.275325))**(log(0.436448, x01))
exp(x01)
exp(x01*x00)
(x00)**(((-0.021753)+(x00*x01)))
(x00)**(((x01*0.505452)+x01))
((x01)**(x00))**((-x01))
((x00+(-0.656126)))**((exp(-1.339703))**((-1.286030)))
exp((-0.958524)/x00)
exp(x00)
((x01+0.155485))**(((-0.612267))**(x00))
((-1.199452))**(((2.718282/x01)+x01))
(x00)**((x01+x01))
(x00)**(0.972487)
(x01)**((((x01*0.320650)/x00)+x01))
exp(1.495458)
exp(log((-(-2.273676))))
exp((0.191670+x01)-(-0.413217))
exp(x00*0.181094)
((x00+(((0.407142*x00)/x00)+x01)))**(1/(x00))
(x00)**((((-0.883711)-(-0.087256))+x00))
(x01)**((((x01*x00)/x00)+x00))
((-0.180538))**(0.878186)
(x00)**((1.575825*x01))
exp(0.772430*x00)
exp((-0.700816)*x01)
((x00+((-0.519584)*x00)))**((1/(x00)+x01))
exp(0.000228)
(1.662296)**((((-0.780485)+x01)+x01))
(((2.718282/x00)+x01))**((-((-x01)+x01)))
(x00)**(((x00-x01)+x00))
1 27
2 3
3 17
From C++ to C++ 41721
1.41581
0.582197
0.360067
0.360976
0.560439
0.882505
0.51694
1.28804
1.38886
1.14632
1.50853
2.1684e-19
0.584311
0.610357
0.520571
0.582534
0.526274
0.577757
0.364405
0.685485
1.11254e-308
0.613375
1.4103
1.01176
1.17646
2.1684e-19
2.1684e-19
0.588681
2.1684e-19
1.10381
1.11254e-308
1.28628
2.1684e-19
2.1684e-19
0.399174
0.370919
0.57052
2.1684e-19
0.89874
2.1684e-19
2.1684e-19
1.11254e-308
1.25681
2.1684e-19
0.571272
0.960965
0.383289
0.525901
0.956292
2.1684e-19
fitness is counted
the best are found
Algorithm is running for 417838 seconds

General 13

(x00)**(x01)
1.51112
(x00)**(x01)
1.50853
(x00)**(x01)
1.49336
(x00)**(x01)
1.47416
(x00)**(x01)
1.47101
exp(x00*x01)
1.45784
exp(x01/x00)
1.44057
exp(x00*x01)
1.42494
(x00)**(((-x00)+x01))
1.41581
exp(x01*x00)
1.4103
exp(x01*x00)
1.39249
(x00)**(((-x00)+x01))
1.39245
(x00)**(x01)
1.38886
exp(x01*x00)
1.38041
exp(x01*x00)
1.37989
(x00)**(((-x00)+x01))
1.37938
exp(x01*x00)
1.37476
(x00)**((-x01))
1.36105
(x00)**((x01+0.140389))
1.35865
((x00+x01))**((0.474116+x01))
1.35856
exp(x01/x00)
1.35452
exp(cos(x00)*x01)
1.34892
(x00)**((0.176962*x01))
1.28804
(x00)**((x01+x01))
1.28628
(x00)**((1.575825*x01))
1.25681
exp((x00/x00)*x01)
1.25285
(x00)**((x01*x00))
1.2495
exp((x01/x00)*0.953846)
1.23916
exp(((-0.519584)*x00)*x01)
1.23849
(x00)**((x00*x01))
1.23604
exp((x00*x01)/x00)
1.23451
exp(0.407142/exp(x01/x00))
1.22246
exp(((-0.519584)*x00)*x01)
1.21294
(1.662296)**(((x01/x00)+x01))
1.18868
(x00)**(((-0.021753)+x01))
1.18797
((x00+(-0.656126)))**((x01/x00))
1.18309
((x00+0.155485))**((0.107431+x01))
1.17707
(x00)**(((x01*0.505452)+x01))
1.17646
exp((x01*x00)*x01)
1.17589
(1.662296)**(((1.029992/x00)+x01))
1.17468
(x00)**((((0.407142*x00)/x00)+x01))
1.17426
exp((x01/x00)+x01)
1.15526
(1.662296)**(((x01/x00)+x01))
1.15338
((1.271180*3.141593)+((0.637926-x01)/x00))
1.15088
(x00)**(((2.718282/x00)+x01))
1.14648
exp((x00*x00)*x01)
1.14632
(x00)**(((-0.180538)+x01))
1.13245
(((2.718282/x00)+x01))**((-x01))
1.11664
((x01+0.155485))**(((-0.612267))**(x00))
1.10381
(x00)**(((2.718282/x00)+x01))
1.10279
selection is done
crossover is done
mutation is done
(x01)**(x01)
((-1.863512))**((x01+x01))
(x00)**((-exp(0.436534+x00)))
(x00)**((3.141593+x00))
(x00)**(((0.407142/exp(x01/x00))+x01))
exp(x00)
exp((((-1.048188)+x00)*x01)*x01)
(x01+((0.386246*0.677595)-(-0.590742)))
((cos(x00)*x01))**((-0.469975))
(x01)**((0.447541+0.140389))
exp((x01/((-0.612267))**(x00))*(-0.719331))
(x01)**(((-1.761980)+x00))
(x00)**(((-0.126043)*x00))
(x00)**(((-x00)+x01))
(x01)**(x01)
exp(x01)
exp(x01*(-0.414320))
exp(x00*(-0.042734))
((0.637926-x01))**(((x00/x01)-x00))
((x00+x01))**((0.474116+0.696710))
exp(-log(x00))
exp((-0.192995)*x01)
(x00)**(x01)
(x00)**((x01+x01))
(x00)**(cos(1.330811))
((-0.513615))**(x01)
(x00)**((-x01))
exp(((-0.519584)*x00)*x00)
((x00+0.155485))**(((-0.762775)/x00))
(x00)**(x01)
((x00+(-0.656126)))**(0.299425)
(x00)**((-0.971391))
(x01)**(((-x00)+x01))
(x00)**(x00)
(x00)**(((-x00)+0.176962))
(x00)**((0.637926-x01))
((x01+x01))**((x01+0.140389))
(x00)**((x01*x01))
exp(log((-1.125164), x00)*x01)
((x00+x01))**(log(x00))
((x01*x00))**(x01)
(x01)**((-x01))
(x00)**((x01+x00))
((-0.237372))**(x01)
exp((1/(-1.095573)*x00)*x01)
(x00)**(((x01)**(x00)+0.407142))
(x00)**((x01+(-0.151161)))
exp((x00*0.423820)/x00)
((x00+2.718282))**((x01/1.662296))
exp((-1.120255)*x01)
1 27
2 3
3 16
From C++ to C++ 31166
2.1684e-19
1.11254e-308
0.536956
2.1684e-19
1.14204
2.1684e-19
1.06725
0.521223
2.1684e-19
2.1684e-19
2.1684e-19
2.1684e-19
0.556087
1.41126
2.1684e-19
0.616003
0.579047
0.513596
2.1684e-19
2.1684e-19
0.455889
0.580048
1.4528
1.2858
0.610088
1.11254e-308
1.3685
0.568363
0.529002
1.55472
0.592522
0.45299
2.1684e-19
2.1684e-19
0.58993
2.1684e-19
2.1684e-19
1.27724
1.11254e-308
2.1684e-19
2.1684e-19
2.1684e-19
2.1684e-19
1.11254e-308
1.16105
1.36802
1.17847
0.558204
1.16426
0.56691
fitness is counted
the best are found
Algorithm is running for 449004 seconds

General 14

(x00)**(x01)
1.55472
(x00)**(x01)
1.51112
(x00)**(x01)
1.50853
(x00)**(x01)
1.49336
(x00)**(x01)
1.47416
(x00)**(x01)
1.47101
exp(x00*x01)
1.45784
(x00)**(x01)
1.4528
exp(x01/x00)
1.44057
exp(x00*x01)
1.42494
(x00)**(((-x00)+x01))
1.41581
(x00)**(((-x00)+x01))
1.41126
exp(x01*x00)
1.4103
exp(x01*x00)
1.39249
(x00)**(((-x00)+x01))
1.39245
(x00)**(x01)
1.38886
exp(x01*x00)
1.38041
exp(x01*x00)
1.37989
(x00)**(((-x00)+x01))
1.37938
exp(x01*x00)
1.37476
(x00)**((-x01))
1.3685
(x00)**(((x01)**(x00)+0.407142))
1.36802
(x00)**((-x01))
1.36105
(x00)**((x01+0.140389))
1.35865
((x00+x01))**((0.474116+x01))
1.35856
exp(x01/x00)
1.35452
exp(cos(x00)*x01)
1.34892
(x00)**((0.176962*x01))
1.28804
(x00)**((x01+x01))
1.28628
(x00)**((x01+x01))
1.2858
(x00)**((x01*x01))
1.27724
(x00)**((1.575825*x01))
1.25681
exp((x00/x00)*x01)
1.25285
(x00)**((x01*x00))
1.2495
exp((x01/x00)*0.953846)
1.23916
exp(((-0.519584)*x00)*x01)
1.23849
(x00)**((x00*x01))
1.23604
exp((x00*x01)/x00)
1.23451
exp(0.407142/exp(x01/x00))
1.22246
exp(((-0.519584)*x00)*x01)
1.21294
(1.662296)**(((x01/x00)+x01))
1.18868
(x00)**(((-0.021753)+x01))
1.18797
((x00+(-0.656126)))**((x01/x00))
1.18309
(x00)**((x01+(-0.151161)))
1.17847
((x00+0.155485))**((0.107431+x01))
1.17707
(x00)**(((x01*0.505452)+x01))
1.17646
exp((x01*x00)*x01)
1.17589
(1.662296)**(((1.029992/x00)+x01))
1.17468
(x00)**((((0.407142*x00)/x00)+x01))
1.17426
((x00+2.718282))**((x01/1.662296))
1.16426
selection is done
crossover is done
mutation is done
(x00)**(0.971260)
(x01)**(cos(1.158243))
((-(-0.374824)))**(((-x01)+x01))
exp(x01*(x01*0.942508))
(1.662296)**((((-0.151161)/x01)+x01))
exp(x01)
exp(1/(x00))
exp(x00)
(x00)**((0.107431+x01))
(x00)**(x00)
(x01)**((x01/1.662296))
((x00+0.155485))**((0.107431+0.127025))
((x01*x00))**(x01)
exp((-0.191253)*x00)
exp(x00*1.110240)
exp(x01*x00)
(x00)**((0.176962*x00))
((x00+(-0.656126)))**((x00/x01))
((-x00))**((x00+0.140389))
((x00+(-0.656126)))**((x01/x00))
(x00)**(x00)
(x01)**(x01)
((x00+x01))**((((x01)**(x01)+0.407142)+x01))
(x01)**(((-0.688067)+x01))
((x00+2.718282))**((0.474116+x00))
(x00)**((0.176962*(-0.076137)))
(x01)**(0.140389)
exp(x00/x00)
(x00)**((x01+x00))
(x00)**(((-x00)+x00))
exp(log((-0.757355), (-1.459054)))
exp(0.131940*x00)
exp(x00*(-1.295927))
exp(x01*x01)
(x00)**(((x00)**(x01)+0.407142))
(x00)**((sin(x01*x01)+x01))
exp(0.187310)
exp(-x00)
exp((x01/x01)/x00)
(0.556562)**((x01*x01))
exp(x01)
exp(cos(x01))
exp((-1.430242)*x01)
((-1.217539))**(((-x01)+x01))
(x00)**(x01)
exp(-1.156747)
(x01)**(1/(cos(x01)))
(x00)**((((x01*x00)/x00)+x01))
exp(x01)
exp(0.825182)
1 28
2 3
3 17
From C++ to C++ 33480
2.1684e-19
2.1684e-19
0.527357
0.5298
2.1684e-19
0.604632
0.583388
2.1684e-19
1.35566
2.1684e-19
2.1684e-19
0.550881
2.1684e-19
0.55318
2.1684e-19
1.39279
2.1684e-19
2.1684e-19
1.11254e-308
1.0862
2.1684e-19
2.1684e-19
2.1684e-19
2.1684e-19
2.1684e-19
0.563118
2.1684e-19
0.606298
2.1684e-19
0.546614
1.11254e-308
2.1684e-19
0.560602
0.566328
2.1684e-19
1.0887
0.384426
0.598004
2.1684e-19
0.577204
0.602537
0.613363
0.569911
0.541301
1.46762
0.348045
2.1684e-19
1.04802
0.605799
0.391517
fitness is counted
the best are found
Algorithm is running for 482484 seconds

General 15

(x00)**(x01)
1.55472
(x00)**(x01)
1.51112
(x00)**(x01)
1.50853
(x00)**(x01)
1.49336
(x00)**(x01)
1.47416
(x00)**(x01)
1.47101
(x00)**(x01)
1.46762
exp(x00*x01)
1.45784
(x00)**(x01)
1.4528
exp(x01/x00)
1.44057
exp(x00*x01)
1.42494
(x00)**(((-x00)+x01))
1.41581
(x00)**(((-x00)+x01))
1.41126
exp(x01*x00)
1.4103
exp(x01*x00)
1.39279
exp(x01*x00)
1.39249
(x00)**(((-x00)+x01))
1.39245
(x00)**(x01)
1.38886
exp(x01*x00)
1.38041
exp(x01*x00)
1.37989
(x00)**(((-x00)+x01))
1.37938
exp(x01*x00)
1.37476
(x00)**((-x01))
1.3685
(x00)**(((x01)**(x00)+0.407142))
1.36802
(x00)**((-x01))
1.36105
(x00)**((x01+0.140389))
1.35865
((x00+x01))**((0.474116+x01))
1.35856
(x00)**((0.107431+x01))
1.35566
exp(x01/x00)
1.35452
exp(cos(x00)*x01)
1.34892
(x00)**((0.176962*x01))
1.28804
(x00)**((x01+x01))
1.28628
(x00)**((x01+x01))
1.2858
(x00)**((x01*x01))
1.27724
(x00)**((1.575825*x01))
1.25681
exp((x00/x00)*x01)
1.25285
(x00)**((x01*x00))
1.2495
exp((x01/x00)*0.953846)
1.23916
exp(((-0.519584)*x00)*x01)
1.23849
(x00)**((x00*x01))
1.23604
exp((x00*x01)/x00)
1.23451
exp(0.407142/exp(x01/x00))
1.22246
exp(((-0.519584)*x00)*x01)
1.21294
(1.662296)**(((x01/x00)+x01))
1.18868
(x00)**(((-0.021753)+x01))
1.18797
((x00+(-0.656126)))**((x01/x00))
1.18309
(x00)**((x01+(-0.151161)))
1.17847
((x00+0.155485))**((0.107431+x01))
1.17707
(x00)**(((x01*0.505452)+x01))
1.17646
exp((x01*x00)*x01)
1.17589
selection is done
crossover is done
mutation is done
exp(sin(x00))**(cos(1.075244))
((((-0.519584)*x00)*x01))**((log(0.230934, x01)+x01))
(((-x00)+(-1.041038)))**(x01)
exp(1/(x00))
(x00)**(((-(x01*2.718282))+x01))
(x00)**(((x00)**(x00)+0.407142))
(x00)**(((-x01)+x01))
exp((-1.116656)*x01)
(x00)**((0.107431+(-0.997522)))
exp(x01)
(0.926463)**((x01+((-0.519584)*x00)))
(x00)**(log((x00)**(x00)))
((-0.675637))**((x01*x00))
(x00)**(((x01*0.505452)+x01))
(0.217016)**((x00+x01))
exp((0.760030/x00)*x01)
exp(0.339887*x01)
(x01)**(((-1.645068)/x01))
(x01)**((0.566929/(-1.340257)))
exp((x00*0.810952)/x00)
(x00)**(0.180888)
exp(x01/2.718282)
exp(x01*(0.211492*x01))
(0.021753)**(1/(-0.811793))
((-0.103103))**(((-0.107431)+x01))
(x00)**(((x01)**(x00)+(-0.113274)))
exp(-0.389340)
exp(0.643601)
(x00)**((0.176962*x00))
exp(x01)
(x00)**(log(x01))
((-x01))**((x00-exp(x00)))
exp(x01)
(cos(3.219462))**((x00*x01))
(x00)**(x01)
(x01)**(((x01)**(x00)+x01))
exp(log(x00))
exp((-x01)*0.953846)
(x00)**(0.309194)
exp(x01*(0.407142/exp(x00/x00)))
exp((1.545214/x00)+x01)
exp((-1.575944)/exp(x01))
((-0.045283))**(x01)
(((-0.480999)+x01))**((0.474116+x01))
exp(x00*(-1.119823))
(x00)**((log((-0.056152), x00)+x01))
exp((x00*(x01+0.140389))/1.655073)
(x00)**(3.141593)
(x00)**(((-x00)+x00))
exp((0.586308/x00)*x01)
1 23
2 3
3 14
From C++ to C++ 33291
0.585741
1.11254e-308
1.11254e-308
0.595266
1.09036
2.1684e-19
1.2516
0.554221
0.445181
0.627853
2.1684e-19
2.1684e-19
1.11254e-308
1.18056
1.1607
1.20086
0.577681
1.11254e-308
2.1684e-19
0.564537
0.622787
0.573574
0.538906
2.1684e-19
1.11254e-308
1.10133
0.372519
0.387849
2.1684e-19
0.598289
2.1684e-19
1.11254e-308
0.61174
1.11254e-308
1.43953
2.1684e-19
2.1684e-19
0.562758
0.64479
1.05109
1.12399
0.486093
1.11254e-308
1.11254e-308
0.575763
1.11254e-308
2.1684e-19
2.1684e-19
0.542563
1.19807
fitness is counted
the best are found
Algorithm is running for 515775 seconds

General 16

(x00)**(x01)
1.55472
(x00)**(x01)
1.51112
(x00)**(x01)
1.50853
(x00)**(x01)
1.49336
(x00)**(x01)
1.47416
(x00)**(x01)
1.47101
(x00)**(x01)
1.46762
exp(x00*x01)
1.45784
(x00)**(x01)
1.4528
exp(x01/x00)
1.44057
(x00)**(x01)
1.43953
exp(x00*x01)
1.42494
(x00)**(((-x00)+x01))
1.41581
(x00)**(((-x00)+x01))
1.41126
exp(x01*x00)
1.4103
exp(x01*x00)
1.39279
exp(x01*x00)
1.39249
(x00)**(((-x00)+x01))
1.39245
(x00)**(x01)
1.38886
exp(x01*x00)
1.38041
exp(x01*x00)
1.37989
(x00)**(((-x00)+x01))
1.37938
exp(x01*x00)
1.37476
(x00)**((-x01))
1.3685
(x00)**(((x01)**(x00)+0.407142))
1.36802
(x00)**((-x01))
1.36105
(x00)**((x01+0.140389))
1.35865
((x00+x01))**((0.474116+x01))
1.35856
(x00)**((0.107431+x01))
1.35566
exp(x01/x00)
1.35452
exp(cos(x00)*x01)
1.34892
(x00)**((0.176962*x01))
1.28804
(x00)**((x01+x01))
1.28628
(x00)**((x01+x01))
1.2858
(x00)**((x01*x01))
1.27724
(x00)**((1.575825*x01))
1.25681
exp((x00/x00)*x01)
1.25285
(x00)**(((-x01)+x01))
1.2516
(x00)**((x01*x00))
1.2495
exp((x01/x00)*0.953846)
1.23916
exp(((-0.519584)*x00)*x01)
1.23849
(x00)**((x00*x01))
1.23604
exp((x00*x01)/x00)
1.23451
exp(0.407142/exp(x01/x00))
1.22246
exp(((-0.519584)*x00)*x01)
1.21294
exp((0.760030/x00)*x01)
1.20086
exp((0.586308/x00)*x01)
1.19807
(1.662296)**(((x01/x00)+x01))
1.18868
(x00)**(((-0.021753)+x01))
1.18797
((x00+(-0.656126)))**((x01/x00))
1.18309
selection is done
crossover is done
mutation is done
exp(cos(x00))
exp(x00)
exp(2.350092*(-x01))
(x00)**(((-((-0.262459)*x01))+x01))
(0.259449)**(x00)
(x01)**((sin(0.393295)+x01))
(x00)**(x00)
(x00)**((0.474116+x00))
((x01*x00))**((0.474116+1.660878))
(x01)**(((-2.012874)+x01))
exp(((-0.023167)-(-0.762547))*x01)
exp(((0.760030/x00)*1.017935)*x01)
(x00)**((x00*x01))
(x00)**((1.575825*0.659507))
exp(sin(exp(x01)))
((x00+(-0.656126)))**(1/(exp(-1.676650)))
((x00+(-x00)))**((0.474116+x01))
(x00)**(x01)
((-0.732772))**((x01+x01))
exp(0.402965*x01)
exp(1.383816)
exp(x01)
exp(-1.147640)
exp(((-x00)+x01)/0.645646)
(x00)**((x01+(x00+0.133830)))
(0.179410)**((x01+x01))
(0.407142)**(sin(1/(-0.018460)))
(x01)**((x00+0.407142))
exp(log(0.878071))
(3.141593)**(x01)
(x01)**(x01)
exp((x01/x00)*x00)
exp(x01*x01)
((x01/x00))**(log(0.705806))
((x01+x01))**((-0.656126))
exp(x00)
((-1.273093))**((x00*x01))
(x00)**(x01)
(x00)**((x00-x00))
(sin(x00))**((x01/x00))
(0.715995)**(x01)
exp(x01)
(x00)**(0.165340)
((-x01))**((-0.067330))
(x00)**((0.107431+x01))
(x00)**(log(0.403523, x00))
((0.176962*x01))**((-x01))
exp((-(-1.102975))*x01)
(x01)**(x01)
(x00)**(3.616326)
1 27
2 3
3 16
From C++ to C++ 32501
0.685618
2.1684e-19
0.560976
1.07028
0.583869
2.1684e-19
2.1684e-19
2.1684e-19
2.1684e-19
2.1684e-19
0.54236
1.08149
1.22804
2.1684e-19
0.610832
2.1684e-19
0.641823
1.4924
1.11254e-308
0.576913
0.393224
0.620784
0.361562
1.05564
2.1684e-19
0.561891
0.346967
2.1684e-19
0.369186
0.594351
2.1684e-19
1.24315
0.577774
2.1684e-19
2.1684e-19
2.1684e-19
1.11254e-308
1.52273
0.565234
2.1684e-19
0.602429
0.601145
0.627896
1.11254e-308
1.36655
1.11254e-308
2.1684e-19
0.565213
2.1684e-19
2.1684e-19
fitness is counted
the best are found
Algorithm is running for 548276 seconds

General 17

(x00)**(x01)
1.55472
(x00)**(x01)
1.52273
(x00)**(x01)
1.51112
(x00)**(x01)
1.50853
(x00)**(x01)
1.49336
(x00)**(x01)
1.4924
(x00)**(x01)
1.47416
(x00)**(x01)
1.47101
(x00)**(x01)
1.46762
exp(x00*x01)
1.45784
(x00)**(x01)
1.4528
exp(x01/x00)
1.44057
(x00)**(x01)
1.43953
exp(x00*x01)
1.42494
(x00)**(((-x00)+x01))
1.41581
(x00)**(((-x00)+x01))
1.41126
exp(x01*x00)
1.4103
exp(x01*x00)
1.39279
exp(x01*x00)
1.39249
(x00)**(((-x00)+x01))
1.39245
(x00)**(x01)
1.38886
exp(x01*x00)
1.38041
exp(x01*x00)
1.37989
(x00)**(((-x00)+x01))
1.37938
exp(x01*x00)
1.37476
(x00)**((-x01))
1.3685
(x00)**(((x01)**(x00)+0.407142))
1.36802
(x00)**((0.107431+x01))
1.36655
(x00)**((-x01))
1.36105
(x00)**((x01+0.140389))
1.35865
((x00+x01))**((0.474116+x01))
1.35856
(x00)**((0.107431+x01))
1.35566
exp(x01/x00)
1.35452
exp(cos(x00)*x01)
1.34892
(x00)**((0.176962*x01))
1.28804
(x00)**((x01+x01))
1.28628
(x00)**((x01+x01))
1.2858
(x00)**((x01*x01))
1.27724
(x00)**((1.575825*x01))
1.25681
exp((x00/x00)*x01)
1.25285
(x00)**(((-x01)+x01))
1.2516
(x00)**((x01*x00))
1.2495
exp((x01/x00)*x00)
1.24315
exp((x01/x00)*0.953846)
1.23916
exp(((-0.519584)*x00)*x01)
1.23849
(x00)**((x00*x01))
1.23604
exp((x00*x01)/x00)
1.23451
(x00)**((x00*x01))
1.22804
exp(0.407142/exp(x01/x00))
1.22246
exp(((-0.519584)*x00)*x01)
1.21294
selection is done
crossover is done
mutation is done
((0.107431+x01))**(x01)
exp(-0.152016)
(x00)**(((-x00)+x01))
(x01)**(x00)
exp((x01/x00)*x01)
(x00)**(((-(-0.343029))+x01))
((-0.604498))**(x01)
((-0.615262))**((x01+x01))
(x00)**((x01*x01))
(x00)**(((-0.046523)+x01))
exp(2.279632)
(0.098820)**(x01)
exp((-0.094002)*x01)
exp(0.502020/x01)
(x00)**((x00*x01))
(x00)**((x01*x00))
exp(1.768254*x00)
exp((x00*(x00*x01))/x00)
exp(x00)
exp(x01/x00)
(x00)**((x01*(-0.248734)))
(x00)**((0.129106*x01))
(exp(x00))**(x01)
((-2.136613))**(x00)
(1.399064)**(x00)
(x00)**((-1.906023))
(x00)**(0.864987)
(x00)**(0.788871)
exp(x00)
(x01)**(x00)
exp((-0.117064)/sin(-1.083407))
(x01)**(2.718282)
(x00)**((x00*x01))
(x00)**((-1.141612))
(x00)**(x00)
(x00)**(x00)
(x00)**(x00)
(x00)**(((x01-(-0.516698))+x00))
(x00)**((-0.730487))
(x00)**((x01*x00))
(x00)**((-1.301179))
(x00)**((x01+x01))
((-0.161696))**(x01)
(x00)**(cos(x00))
(x00)**(((x01*0.422850)+x01))
(x00)**(log(x00, x00))
exp(((x01)**(x00)+(-0.930601))*x00)
exp(((-0.519584)*x00)*x01)
exp(x01)
exp(1/(x00)*x00)
1 26
2 3
3 16
From C++ to C++ 37700
0.56444
0.371577
1.42702
0.757362
1.17466
1.45759
1.11254e-308
1.11254e-308
1.26778
1.13752
0.390961
0.588275
0.56547
1.11254e-308
1.22223
1.24327
2.1684e-19
1.09603
2.1684e-19
1.3535
1.32584
1.34099
1.42576
2.1684e-19
2.1684e-19
0.522484
2.1684e-19
2.1684e-19
2.1684e-19
0.75504
0.355872
2.1684e-19
1.26075
0.46859
2.1684e-19
2.1684e-19
2.1684e-19
2.1684e-19
0.47695
1.27372
0.4694
1.35222
1.11254e-308
2.1684e-19
1.15273
1.11254e-308
1.08544
1.2037
0.609146
0.584749
fitness is counted
the best are found
Algorithm is running for 585976 seconds

General 18

(x00)**(x01)
1.55472
(x00)**(x01)
1.52273
(x00)**(x01)
1.51112
(x00)**(x01)
1.50853
(x00)**(x01)
1.49336
(x00)**(x01)
1.4924
(x00)**(x01)
1.47416
(x00)**(x01)
1.47101
(x00)**(x01)
1.46762
exp(x00*x01)
1.45784
(x00)**(((-(-0.343029))+x01))
1.45759
(x00)**(x01)
1.4528
exp(x01/x00)
1.44057
(x00)**(x01)
1.43953
(x00)**(((-x00)+x01))
1.42702
(exp(x00))**(x01)
1.42576
exp(x00*x01)
1.42494
(x00)**(((-x00)+x01))
1.41581
(x00)**(((-x00)+x01))
1.41126
exp(x01*x00)
1.4103
exp(x01*x00)
1.39279
exp(x01*x00)
1.39249
(x00)**(((-x00)+x01))
1.39245
(x00)**(x01)
1.38886
exp(x01*x00)
1.38041
exp(x01*x00)
1.37989
(x00)**(((-x00)+x01))
1.37938
exp(x01*x00)
1.37476
(x00)**((-x01))
1.3685
(x00)**(((x01)**(x00)+0.407142))
1.36802
(x00)**((0.107431+x01))
1.36655
(x00)**((-x01))
1.36105
(x00)**((x01+0.140389))
1.35865
((x00+x01))**((0.474116+x01))
1.35856
(x00)**((0.107431+x01))
1.35566
exp(x01/x00)
1.35452
exp(x01/x00)
1.3535
(x00)**((x01+x01))
1.35222
exp(cos(x00)*x01)
1.34892
(x00)**((0.129106*x01))
1.34099
(x00)**((x01*(-0.248734)))
1.32584
(x00)**((0.176962*x01))
1.28804
(x00)**((x01+x01))
1.28628
(x00)**((x01+x01))
1.2858
(x00)**((x01*x01))
1.27724
(x00)**((x01*x00))
1.27372
(x00)**((x01*x01))
1.26778
(x00)**((x00*x01))
1.26075
(x00)**((1.575825*x01))
1.25681
exp((x00/x00)*x01)
1.25285
selection is done
crossover is done
mutation is done
(x00)**(x01)
(x00)**((x01*3.141593))
(x01)**((x01+1.796514))
(x00)**(x00)
exp(2.718282)
exp(x01/x01)
exp((x01/x01)/x00)
exp(1.883753*x01)
(x00)**((0.359315+x01))
(x00)**(((-0.113413)*x00))
exp(x00*x01)
(x01)**(x01)
(x01)**(x00)
(x00)**(1/(sin(-1.980216)))
exp(0.855416*(0.474116+x01))
(2.061071)**((x01+x01))
(x00)**(((x00)**(x00)+0.407142))
(x00)**(((sin(x00)+x01)+x01))
((x01*x00))**(((-1.310166)+x01))
(x00)**(x00)
(x00)**(x01)
(x01)**((x01+x01))
(x00)**(1.163183)
((x00+x00))**((0.474116+x01))
(x00)**((x01*((x01)**(x01)+0.407142)))
(x01)**(((-1.226273))**(x01))
exp(((-0.624094)*x01)*x00)
(x00)**(1.126113)
(2.718282)**((0.129106*x00))
(log((-0.532875)))**(x01)
exp(-x01)
exp((x01/x01)*x01)
(x00)**((-x00))
exp(x00)
(x00)**(((-(-1.142275))+x01))
(0.490767)**(x01)
(x00)**(((-x01)+1.155204))
(x00)**(x01)
(x01)**(x01)
(x00)**((x00+0.244326))
(x00)**((x00*x01))
(x00)**(((-x00)+x01))
(x00)**(0.564432)
(x00)**(x01)
exp(x00-x00)
(x00)**(((-x01)+0.668879))
exp(x01)
exp(x00)
(x00)**((x01+(x00*x01)))
(((-(-0.343029))+0.302108))**(x01)
1 28
2 3
3 17
From C++ to C++ 28906
1.45828
1.30117
2.1684e-19
2.1684e-19
2.1684e-19
2.1684e-19
2.1684e-19
0.575185
1.49397
0.569608
1.37148
2.1684e-19
0.757816
0.439433
0.545109
0.564046
2.1684e-19
2.1684e-19
2.1684e-19
2.1684e-19
1.47046
2.1684e-19
2.1684e-19
1.38444
2.1684e-19
1.11254e-308
1.24665
2.1684e-19
2.1684e-19
1.11254e-308
0.595739
2.1684e-19
0.627919
2.1684e-19
2.1684e-19
0.601527
2.1684e-19
1.45843
2.1684e-19
2.1684e-19
1.24657
1.4167
0.656146
1.52242
0.579079
2.1684e-19
0.619545
2.1684e-19
1.06015
0.54515
fitness is counted
the best are found
Algorithm is running for 614882 seconds

General 19

(x00)**(x01)
1.55472
(x00)**(x01)
1.52273
(x00)**(x01)
1.52242
(x00)**(x01)
1.51112
(x00)**(x01)
1.50853
(x00)**((0.359315+x01))
1.49397
(x00)**(x01)
1.49336
(x00)**(x01)
1.4924
(x00)**(x01)
1.47416
(x00)**(x01)
1.47101
(x00)**(x01)
1.47046
(x00)**(x01)
1.46762
(x00)**(x01)
1.45843
(x00)**(x01)
1.45828
exp(x00*x01)
1.45784
(x00)**(((-(-0.343029))+x01))
1.45759
(x00)**(x01)
1.4528
exp(x01/x00)
1.44057
(x00)**(x01)
1.43953
(x00)**(((-x00)+x01))
1.42702
(exp(x00))**(x01)
1.42576
exp(x00*x01)
1.42494
(x00)**(((-x00)+x01))
1.4167
(x00)**(((-x00)+x01))
1.41581
(x00)**(((-x00)+x01))
1.41126
exp(x01*x00)
1.4103
exp(x01*x00)
1.39279
exp(x01*x00)
1.39249
(x00)**(((-x00)+x01))
1.39245
(x00)**(x01)
1.38886
((x00+x00))**((0.474116+x01))
1.38444
exp(x01*x00)
1.38041
exp(x01*x00)
1.37989
(x00)**(((-x00)+x01))
1.37938
exp(x01*x00)
1.37476
exp(x00*x01)
1.37148
(x00)**((-x01))
1.3685
(x00)**(((x01)**(x00)+0.407142))
1.36802
(x00)**((0.107431+x01))
1.36655
(x00)**((-x01))
1.36105
(x00)**((x01+0.140389))
1.35865
((x00+x01))**((0.474116+x01))
1.35856
(x00)**((0.107431+x01))
1.35566
exp(x01/x00)
1.35452
exp(x01/x00)
1.3535
(x00)**((x01+x01))
1.35222
exp(cos(x00)*x01)
1.34892
(x00)**((0.129106*x01))
1.34099
(x00)**((x01*(-0.248734)))
1.32584
(x00)**((x01*3.141593))
1.30117
selection is done
crossover is done
mutation is done
exp(-0.777408)
(x01)**((-0.797900))
exp(x00*x00)
(x00)**(0.945081)
((x00+x01))**((0.474116+(-1.324612)))
exp(x00*(-1.122552))
(x01)**((x00+0.140389))
(((-1.631823)+x01))**(x01)
(x00)**(((-x01)+x01))
((-1.289217))**((x01+x01))
(x00)**((((-0.865374))**(2.718282)+x01))
(x00)**((x00+0.140389))
exp(x01*x01)
(exp(x00))**(0.211024)
(x00)**(((-0.577511)+0.407142))
(x00)**(x01)
(x00)**((-0.607517))
exp(0.440394)
(x00)**(cos(log(0.302654, (-0.352524))))
(x00)**((-(-0.364553)))
(x00)**(((-0.799132)+x01))
(x00)**((x00+(-1.041540)))
(x00)**((x01+x01))
(x00)**((x00+0.112942))
(x01)**(x01)
(x00)**(x00)
(x00)**((x00*3.141593))
(x00)**(exp(-2.487749))
exp(-x00)
(x00)**(x01)
(0.407142)**((-0.497384))
(x00)**((0.107431+x01))
(x00)**((0.824407*(-0.248734)))
(x00)**((x00*0.186287))
((-0.797944))**(x01)
(x00)**(((x01)**((-x01))+0.407142))
(x01)**((x01)**((-2.902826)))
(x01)**(((-x00)+x01))
(x00)**(log((-0.665471)))
(x00)**(x00)
(0.520286)**(x00)
(x01)**(x01)
exp(-0.240186)
(x00)**(log(((-0.535291)*(x00*1.830959))))
exp(cos(x00)*x01)
(x00)**((0.541712*x01))
(x00)**((((x01)**(x00)+0.407142)*(-0.269489)))
exp(x00)
(log(x01, 1.069702))**((0.359315+x01))
exp(0.513916)
1 24
2 3
3 15
From C++ to C++ 24080
0.363903
2.1684e-19
2.1684e-19
2.1684e-19
0.747499
0.579305
2.1684e-19
1.11254e-308
1.24144
1.11254e-308
1.11254e-308
2.1684e-19
0.567607
2.1684e-19
0.542491
1.44613
0.47854
0.387185
1.11254e-308
0.609678
0.793804
2.1684e-19
1.24927
2.1684e-19
2.1684e-19
2.1684e-19
2.1684e-19
0.600125
0.59013
1.53307
0.379636
1.44641
0.530266
2.1684e-19
1.11254e-308
2.1684e-19
2.1684e-19
2.1684e-19
1.11254e-308
2.1684e-19
0.584969
2.1684e-19
0.379593
1.11254e-308
1.23739
1.34108
0.961056
2.1684e-19
1.11254e-308
0.381792
fitness is counted
the best are found
Algorithm is running for 638962 seconds

General 20

(x00)**(x01)
1.55472
(x00)**(x01)
1.53307
(x00)**(x01)
1.52273
(x00)**(x01)
1.52242
(x00)**(x01)
1.51112
(x00)**(x01)
1.50853
(x00)**((0.359315+x01))
1.49397
(x00)**(x01)
1.49336
(x00)**(x01)
1.4924
(x00)**(x01)
1.47416
(x00)**(x01)
1.47101
(x00)**(x01)
1.47046
(x00)**(x01)
1.46762
(x00)**(x01)
1.45843
(x00)**(x01)
1.45828
exp(x00*x01)
1.45784
(x00)**(((-(-0.343029))+x01))
1.45759
(x00)**(x01)
1.4528
(x00)**((0.107431+x01))
1.44641
(x00)**(x01)
1.44613
exp(x01/x00)
1.44057
(x00)**(x01)
1.43953
(x00)**(((-x00)+x01))
1.42702
(exp(x00))**(x01)
1.42576
exp(x00*x01)
1.42494
(x00)**(((-x00)+x01))
1.4167
(x00)**(((-x00)+x01))
1.41581
(x00)**(((-x00)+x01))
1.41126
exp(x01*x00)
1.4103
exp(x01*x00)
1.39279
exp(x01*x00)
1.39249
(x00)**(((-x00)+x01))
1.39245
(x00)**(x01)
1.38886
((x00+x00))**((0.474116+x01))
1.38444
exp(x01*x00)
1.38041
exp(x01*x00)
1.37989
(x00)**(((-x00)+x01))
1.37938
exp(x01*x00)
1.37476
exp(x00*x01)
1.37148
(x00)**((-x01))
1.3685
(x00)**(((x01)**(x00)+0.407142))
1.36802
(x00)**((0.107431+x01))
1.36655
(x00)**((-x01))
1.36105
(x00)**((x01+0.140389))
1.35865
((x00+x01))**((0.474116+x01))
1.35856
(x00)**((0.107431+x01))
1.35566
exp(x01/x00)
1.35452
exp(x01/x00)
1.3535
(x00)**((x01+x01))
1.35222
exp(cos(x00)*x01)
1.34892
selection is done
crossover is done
mutation is done
exp(1.335844*x00)
(x01)**((-(-0.343029)))
(1.332490)**(x01)
((-0.731689))**(x01)
((-0.481606))**(x00)
(x00)**(x01)
(0.216662)**(x00)
(x00)**(1.805876)
(x00)**(3.141593)
exp(log(1.034119, 0.943844))
exp(0.140389/x01)
(1.108759)**(x00)
(x00)**(((-(0.610049*x01))+x01))
(x01)**(x01)
((-1.835510))**(x01)
exp(x01*(1/(-0.174177)*x01))
(cos(x01))**((0.107431+x01))
(x00)**(((-(-0.343029))+log(1.583819, x00)))
(x00)**(x00)
(x00)**((-0.706341))
(exp(x00))**(x01)
exp(x01/3.141593)
(x00)**(((-0.305201)+x01))
(x00)**((x00)**(x00))
(x01)**((x01+x00))
(1.782451)**(((0.474116+x01)+x01))
(x00)**(((x01)**(x00)+x00))
(x00)**((-x01))
(x00)**(x00)
(x00)**(0.264294)
exp(log((-1.291733), log((-0.287515))))
(x00)**(0.474116)
(1.981751)**((cos(x00)+x01))
(x01)**(((-x01)+x01))
(x00)**(x01)
((-0.047935))**(0.140389)
(x00)**(x01)
(x01)**(0.761568)
((-1.191210))**((x01*x00))
(x00)**(((-x00)+x01))
(0.466336)**(((-x00)+x01))
exp(cos(x00))
(x00)**(((-x01)+x01))
(x00)**(((x01+x01)+0.140389))
(x01)**((0.416406+x01))
((-0.461172))**(x01)
(x00)**(x00)
(0.294103)**(x00)
(x00)**((-x00))
exp(x01/x00)
1 24
2 3
3 15
From C++ to C++ 26806
2.1684e-19
2.1684e-19
0.59786
1.11254e-308
0.0108967
1.50307
0.562339
2.1684e-19
2.1684e-19
0.35595
1.11254e-308
2.1684e-19
1.05448
2.1684e-19
1.11254e-308
0.526
0.554815
1.11254e-308
2.1684e-19
0.469056
1.40494
0.591834
1.00159
2.1684e-19
2.1684e-19
0.53878
2.1684e-19
1.35845
2.1684e-19
0.644934
1.11254e-308
0.654037
1.61178
0.548781
1.50031
1.11254e-308
1.5295
2.1684e-19
1.11254e-308
1.44066
2.1684e-19
0.671314
1.21435
1.16801
2.1684e-19
1.11254e-308
2.1684e-19
0.590708
0.622819
1.43302
fitness is counted
the best are found
Algorithm is running for 665768 seconds

General 21

(1.981751)**((cos(x00)+x01))
1.61178
(x00)**(x01)
1.55472
(x00)**(x01)
1.53307
(x00)**(x01)
1.5295
(x00)**(x01)
1.52273
(x00)**(x01)
1.52242
(x00)**(x01)
1.51112
(x00)**(x01)
1.50853
(x00)**(x01)
1.50307
(x00)**(x01)
1.50031
(x00)**((0.359315+x01))
1.49397
(x00)**(x01)
1.49336
(x00)**(x01)
1.4924
(x00)**(x01)
1.47416
(x00)**(x01)
1.47101
(x00)**(x01)
1.47046
(x00)**(x01)
1.46762
(x00)**(x01)
1.45843
(x00)**(x01)
1.45828
exp(x00*x01)
1.45784
(x00)**(((-(-0.343029))+x01))
1.45759
(x00)**(x01)
1.4528
(x00)**((0.107431+x01))
1.44641
(x00)**(x01)
1.44613
(x00)**(((-x00)+x01))
1.44066
exp(x01/x00)
1.44057
(x00)**(x01)
1.43953
exp(x01/x00)
1.43302
(x00)**(((-x00)+x01))
1.42702
(exp(x00))**(x01)
1.42576
exp(x00*x01)
1.42494
(x00)**(((-x00)+x01))
1.4167
(x00)**(((-x00)+x01))
1.41581
(x00)**(((-x00)+x01))
1.41126
exp(x01*x00)
1.4103
(exp(x00))**(x01)
1.40494
exp(x01*x00)
1.39279
exp(x01*x00)
1.39249
(x00)**(((-x00)+x01))
1.39245
(x00)**(x01)
1.38886
((x00+x00))**((0.474116+x01))
1.38444
exp(x01*x00)
1.38041
exp(x01*x00)
1.37989
(x00)**(((-x00)+x01))
1.37938
exp(x01*x00)
1.37476
exp(x00*x01)
1.37148
(x00)**((-x01))
1.3685
(x00)**(((x01)**(x00)+0.407142))
1.36802
(x00)**((0.107431+x01))
1.36655
(x00)**((-x01))
1.36105
selection is done
crossover is done
mutation is done
((-x00))**(log((x01*x01), 2.718282))
(x00)**(x01)
(x00)**(x00)
((-1.556860))**(x01)
(x00)**(sin(x01))
exp(sin(x00)**(x01))
((x01*(-0.132448)))**(x01)
(x01)**(((-0.450629)+x01))
(1.249846)**(((-x00)+x01))
exp(x00)
(sin(x00))**(x01)
exp(sin(1.455579))
(x01)**((cos(x00)+x01))
exp(0.041832*x00)
exp(x00*x01)
(x00)**((-0.720796))
exp(x01+x01)
(x00)**(x00)
exp(-0.172444)
(x00)**(0.568032)
(2.061938)**(0.107431)
(x00)**((0.359315+x01))
exp(x01*x00)
(exp(x01/x00))**(x01)
(x00)**(x00)
(x01)**(((-0.314190)-2.453641))
(x00)**(x01)
(x00)**(2.718282)
(1/(0.600295))**(x01)
(x00)**(((-x00)+0.304548))
exp((-1.863505)*x00)
(x00)**(log((-0.003511)))
(x00)**((x01+1.774882))
(x00)**((x00+x01))
((-1.655314))**(x00)
(x00)**(0.551427)
exp(x00*x00)
(x00)**((x01/x01))
(x00)**(0.305281)
(x00)**((-1.268210))
exp(-0.441509)
(x01)**(x00)
(0.386634)**(x00)
exp(x00*x00)
((-0.732621))**(x01)
(x00)**((1.699821/(-0.067340)))
(0.107431)**((-1.446227))
(((-x01)+x01))**(x01)
(x01)**(x01)
(x01)**(((-x00)+x00))
1 26
2 3
3 16
From C++ to C++ 31910
1.11254e-308
1.548
2.1684e-19
1.11254e-308
1.29322
2.1684e-19
1.11254e-308
2.1684e-19
1.10003
2.1684e-19
2.1684e-19
0.377131
2.1684e-19
2.1684e-19
1.41517
0.478976
0.590182
2.1684e-19
0.381232
0.671774
0.376964
1.57477
1.43386
1.19708
2.1684e-19
2.1684e-19
1.39793
2.1684e-19
0.559706
0.593443
0.523643
1.11254e-308
2.1684e-19
2.1684e-19
2.1684e-19
2.1684e-19
2.1684e-19
2.1684e-19
0.649873
0.457279
0.374161
0.756169
0.602774
2.1684e-19
1.11254e-308
0.559778
2.1684e-19
2.1684e-19
2.1684e-19
1.17041
fitness is counted
the best are found
Algorithm is running for 697678 seconds

General 22

(1.981751)**((cos(x00)+x01))
1.61178
(x00)**((0.359315+x01))
1.57477
(x00)**(x01)
1.55472
(x00)**(x01)
1.548
(x00)**(x01)
1.53307
(x00)**(x01)
1.5295
(x00)**(x01)
1.52273
(x00)**(x01)
1.52242
(x00)**(x01)
1.51112
(x00)**(x01)
1.50853
(x00)**(x01)
1.50307
(x00)**(x01)
1.50031
(x00)**((0.359315+x01))
1.49397
(x00)**(x01)
1.49336
(x00)**(x01)
1.4924
(x00)**(x01)
1.47416
(x00)**(x01)
1.47101
(x00)**(x01)
1.47046
(x00)**(x01)
1.46762
(x00)**(x01)
1.45843
(x00)**(x01)
1.45828
exp(x00*x01)
1.45784
(x00)**(((-(-0.343029))+x01))
1.45759
(x00)**(x01)
1.4528
(x00)**((0.107431+x01))
1.44641
(x00)**(x01)
1.44613
(x00)**(((-x00)+x01))
1.44066
exp(x01/x00)
1.44057
(x00)**(x01)
1.43953
exp(x01*x00)
1.43386
exp(x01/x00)
1.43302
(x00)**(((-x00)+x01))
1.42702
(exp(x00))**(x01)
1.42576
exp(x00*x01)
1.42494
(x00)**(((-x00)+x01))
1.4167
(x00)**(((-x00)+x01))
1.41581
exp(x00*x01)
1.41517
(x00)**(((-x00)+x01))
1.41126
exp(x01*x00)
1.4103
(exp(x00))**(x01)
1.40494
(x00)**(x01)
1.39793
exp(x01*x00)
1.39279
exp(x01*x00)
1.39249
(x00)**(((-x00)+x01))
1.39245
(x00)**(x01)
1.38886
((x00+x00))**((0.474116+x01))
1.38444
exp(x01*x00)
1.38041
exp(x01*x00)
1.37989
(x00)**(((-x00)+x01))
1.37938
exp(x01*x00)
1.37476
selection is done
crossover is done
mutation is done
(x00)**(((-x00)+x01))
(x00)**(x01)
exp((-2.411467)*x00)
(x00)**(x01)
exp(x01*exp(x00))
(((-0.079362))**(0.961636))**(x00)
exp(-1.252205)
(x00)**((-x00))
exp(x00*x00)
exp(x01*x01)
(x00)**(((-x00)+x00))
exp(x00)
(x00)**(x01)
(x00)**(x00)
exp(x00)
(x00)**((x00/x00))
(x00)**(((x00-x01)+x01))
(x01)**(x00)
(x00)**(x00)
(x01)**(((-x00)+x01))
(exp(0.735534))**(x01)
(x00)**(((-(-0.209858))+x01))
(x01)**(x01)
exp(-0.999416)
(x00)**((x01*x00))
((x01+x00))**((x01+x01))
(x00)**(cos(log((-0.018098), (-0.378925))))
exp(-0.802637)
(x00)**((x00+x00))
(x00)**(((-(-0.752589))+x01))
(x00)**((x00/3.141593))
(exp(x00))**(((-x00)+1.428290))
(x00)**(x01)
(x00)**(x00)
exp(-0.352688)
(x01)**(x00)
(0.150402)**((0.107431+(0.107431+x01)))
((-x00))**(1.876425)
exp(x01*x00)
(x00)**(x00)
(x00)**((0.761554+1/(x01)))
(x00)**((x01/x00))
(x00)**(((-x00)+x01))
(x00)**((-(-2.379557)))
((-0.332534))**(((-x00)+x00))
(x00)**((-1.185401))
(x00)**(1.978319)
exp(x00/x00)
(x00)**(x00)
((x00*x01))**(sin((-0.699549)-x00))
1 27
2 3
3 17
From C++ to C++ 32671
1.41814
1.4324
0.518754
1.4765
2.1684e-19
1.11254e-308
0.354633
0.621251
2.1684e-19
0.588226
0.542688
2.1684e-19
1.51361
2.1684e-19
2.1684e-19
2.1684e-19
2.1684e-19
0.767188
2.1684e-19
2.1684e-19
0.572652
1.28572
2.1684e-19
0.357126
1.21718
1.16327
1.11254e-308
0.363094
2.1684e-19
2.1684e-19
2.1684e-19
0.571701
1.42979
2.1684e-19
0.371741
0.760933
0.516346
1.11254e-308
1.34955
2.1684e-19
2.1684e-19
1.26327
1.4615
2.1684e-19
0.548583
0.460089
2.1684e-19
0.597846
2.1684e-19
2.1684e-19
fitness is counted
the best are found
Algorithm is running for 730349 seconds

General 23

(1.981751)**((cos(x00)+x01))
1.61178
(x00)**((0.359315+x01))
1.57477
(x00)**(x01)
1.55472
(x00)**(x01)
1.548
(x00)**(x01)
1.53307
(x00)**(x01)
1.5295
(x00)**(x01)
1.52273
(x00)**(x01)
1.52242
(x00)**(x01)
1.51361
(x00)**(x01)
1.51112
(x00)**(x01)
1.50853
(x00)**(x01)
1.50307
(x00)**(x01)
1.50031
(x00)**((0.359315+x01))
1.49397
(x00)**(x01)
1.49336
(x00)**(x01)
1.4924
(x00)**(x01)
1.4765
(x00)**(x01)
1.47416
(x00)**(x01)
1.47101
(x00)**(x01)
1.47046
(x00)**(x01)
1.46762
(x00)**(((-x00)+x01))
1.4615
(x00)**(x01)
1.45843
(x00)**(x01)
1.45828
exp(x00*x01)
1.45784
(x00)**(((-(-0.343029))+x01))
1.45759
(x00)**(x01)
1.4528
(x00)**((0.107431+x01))
1.44641
(x00)**(x01)
1.44613
(x00)**(((-x00)+x01))
1.44066
exp(x01/x00)
1.44057
(x00)**(x01)
1.43953
exp(x01*x00)
1.43386
exp(x01/x00)
1.43302
(x00)**(x01)
1.4324
(x00)**(x01)
1.42979
(x00)**(((-x00)+x01))
1.42702
(exp(x00))**(x01)
1.42576
exp(x00*x01)
1.42494
(x00)**(((-x00)+x01))
1.41814
(x00)**(((-x00)+x01))
1.4167
(x00)**(((-x00)+x01))
1.41581
exp(x00*x01)
1.41517
(x00)**(((-x00)+x01))
1.41126
exp(x01*x00)
1.4103
(exp(x00))**(x01)
1.40494
(x00)**(x01)
1.39793
exp(x01*x00)
1.39279
exp(x01*x00)
1.39249
(x00)**(((-x00)+x01))
1.39245
selection is done
crossover is done
mutation is done
exp(x01)
(3.141593)**(x01)
(x00)**(log((1.761898/0.828805)))
exp(x01+x00)
((x01*(-0.398442)))**(x01)
(x00)**(((-1.581224)+x01))
exp(x00*x00)
exp(x00-x01)
exp(-0.931466)
exp(x00*x00)
(x00)**((((-0.183669)*x00)+x01))
(x00)**((-x01))
((x01/x00))**(x01)
(x01)**((0.018821+x01))
(x00)**((sin(-0.483154)+x01))
exp(log((-3.863340), 2.718282))
(x00)**(((-0.492298)*(-0.590495)))
(x00)**((-0.420866))
(x01)**(x01)
(x00)**(2.024553)
(x00)**(((-x01)+x01))
(x00)**(x01)
(x01)**(x01)
exp(x01*0.647261)
exp(((-x00)+x01)*x00)
exp(x00/x01)
(x00)**(((-x00)+(x00*0.515120)))
(cos(x00))**(x01)
((-0.149998))**(x00)
(x00)**((log(x01, x00)+x01))
exp(x00*x00)
(x00)**(x00)
(1.176638)**(x01)
(cos(x01))**(x01)
exp(x01/(-0.092488))
(x00)**(x01)
(x00)**(x01)
(cos(2.365059))**(x01)
(x01)**(x01)
exp(x01*0.079081)
((-0.747141))**(((-x00)+x01))
exp(x01/(1/(-0.054219)+x01))
(x00)**((-(-1.068039)))
(x00)**(((-(-0.346987))+x01))
(x00)**(((-0.438267))**(3.141593))
(0.582006)**((0.107431+x00))
(x01)**(x01)
(0.444301)**(x01)
(0.614691)**(x00)
(x01)**(sin(0.687620))
1 25
2 3
3 15
From C++ to C++ 27611
0.623698
0.60468
0.608215
2.1684e-19
1.11254e-308
0.889112
2.1684e-19
2.1684e-19
0.355893
2.1684e-19
1.18996
1.38826
2.1684e-19
2.1684e-19
0.930586
1.11254e-308
0.588945
0.503317
2.1684e-19
2.1684e-19
1.22317
1.51876
2.1684e-19
0.578598
1.11661
1.11254e-308
0.557421
2.1684e-19
0.0300263
1.11254e-308
2.1684e-19
2.1684e-19
0.601453
0.581645
0.553543
1.46008
1.40627
1.11254e-308
2.1684e-19
0.596792
1.11254e-308
0.532852
2.1684e-19
1.40322
1.11254e-308
0.548974
2.1684e-19
0.599935
0.576329
2.1684e-19
fitness is counted
the best are found
Algorithm is running for 757960 seconds

General 24

(1.981751)**((cos(x00)+x01))
1.61178
(x00)**((0.359315+x01))
1.57477
(x00)**(x01)
1.55472
(x00)**(x01)
1.548
(x00)**(x01)
1.53307
(x00)**(x01)
1.5295
(x00)**(x01)
1.52273
(x00)**(x01)
1.52242
(x00)**(x01)
1.51876
(x00)**(x01)
1.51361
(x00)**(x01)
1.51112
(x00)**(x01)
1.50853
(x00)**(x01)
1.50307
(x00)**(x01)
1.50031
(x00)**((0.359315+x01))
1.49397
(x00)**(x01)
1.49336
(x00)**(x01)
1.4924
(x00)**(x01)
1.4765
(x00)**(x01)
1.47416
(x00)**(x01)
1.47101
(x00)**(x01)
1.47046
(x00)**(x01)
1.46762
(x00)**(((-x00)+x01))
1.4615
(x00)**(x01)
1.46008
(x00)**(x01)
1.45843
(x00)**(x01)
1.45828
exp(x00*x01)
1.45784
(x00)**(((-(-0.343029))+x01))
1.45759
(x00)**(x01)
1.4528
(x00)**((0.107431+x01))
1.44641
(x00)**(x01)
1.44613
(x00)**(((-x00)+x01))
1.44066
exp(x01/x00)
1.44057
(x00)**(x01)
1.43953
exp(x01*x00)
1.43386
exp(x01/x00)
1.43302
(x00)**(x01)
1.4324
(x00)**(x01)
1.42979
(x00)**(((-x00)+x01))
1.42702
(exp(x00))**(x01)
1.42576
exp(x00*x01)
1.42494
(x00)**(((-x00)+x01))
1.41814
(x00)**(((-x00)+x01))
1.4167
(x00)**(((-x00)+x01))
1.41581
exp(x00*x01)
1.41517
(x00)**(((-x00)+x01))
1.41126
exp(x01*x00)
1.4103
(x00)**(x01)
1.40627
(exp(x00))**(x01)
1.40494
(x00)**(((-(-0.346987))+x01))
1.40322
selection is done
crossover is done
mutation is done
exp(x00*0.751114)
(x00)**(x00)
(x00)**((x01)**((-0.714984)))
(x01)**(1.981751)
(exp(-0.249633))**(x00)
(x00)**(x01)
(x00)**((((-0.051036)-x01)+x00))
(0.924293)**(x01)
(x00)**((x01+x01))
(x01)**(2.718282)
(x00)**(((-(x00)**(x01))+x01))
(x00)**((1/(x01)+x01))
(x01)**(x00)
((-x00))**(((-x00)+x01))
(x00)**(x01)
(x00)**(x00)
(x01)**(x01)
exp(x00/x00)
(x00)**(exp(x01))
(0.040510)**(x01)
(x00)**((-1.189562))
(x00)**((0.359315+(-0.175747)))
(1.227281)**(x00)
(x00)**(x01)
(x00)**(1.244743)
(x00)**(((-(-0.360659))+x00))
((-0.980310))**(x01)
(x00)**(2.078641)
(0.522675)**(x00)
(((-(-2.475580))+x01))**(x01)
((-1.186923))**(x01)
(x00)**(0.662241)
(x00)**((0.194099*0.779226))
(x00)**(log(x00, x00))
(x00)**(x01)
(x01)**(((-(-0.720806))+x01))
(x00)**(x01)
(x00)**((x01+x01))
(((-x00)+0.681874))**((0.359315+x01))
exp((-2.650789)/x00)
exp(x00)
(x01)**(x01)
(x00)**((-0.416477))
(x00)**(x01)
exp(x00*x00)
(x01)**(x01)
((-0.950811))**((-x00))
exp(x00*x01)
(x00)**(x01)
(x00)**(x01)
1 26
2 3
3 16
From C++ to C++ 26650
2.1684e-19
2.1684e-19
2.1684e-19
2.1684e-19
0.547458
1.47759
2.1684e-19
0.589425
1.34016
2.1684e-19
0.715383
2.1684e-19
0.759694
1.11254e-308
1.4461
2.1684e-19
2.1684e-19
0.608333
2.1684e-19
0.597473
0.471638
0.594947
2.1684e-19
1.53706
2.1684e-19
2.1684e-19
1.11254e-308
2.1684e-19
0.58193
0.55471
1.11254e-308
0.666199
0.583813
1.11254e-308
1.47475
2.1684e-19
1.39468
1.31292
1.11254e-308
0.582786
2.1684e-19
2.1684e-19
0.515132
1.53855
2.1684e-19
2.1684e-19
2.1684e-19
1.42966
1.41051
1.43797
fitness is counted
the best are found
Algorithm is running for 784610 seconds

General 25

(1.981751)**((cos(x00)+x01))
1.61178
(x00)**((0.359315+x01))
1.57477
(x00)**(x01)
1.55472
(x00)**(x01)
1.548
(x00)**(x01)
1.53855
(x00)**(x01)
1.53706
(x00)**(x01)
1.53307
(x00)**(x01)
1.5295
(x00)**(x01)
1.52273
(x00)**(x01)
1.52242
(x00)**(x01)
1.51876
(x00)**(x01)
1.51361
(x00)**(x01)
1.51112
(x00)**(x01)
1.50853
(x00)**(x01)
1.50307
(x00)**(x01)
1.50031
(x00)**((0.359315+x01))
1.49397
(x00)**(x01)
1.49336
(x00)**(x01)
1.4924
(x00)**(x01)
1.47759
(x00)**(x01)
1.4765
(x00)**(x01)
1.47475
(x00)**(x01)
1.47416
(x00)**(x01)
1.47101
(x00)**(x01)
1.47046
(x00)**(x01)
1.46762
(x00)**(((-x00)+x01))
1.4615
(x00)**(x01)
1.46008
(x00)**(x01)
1.45843
(x00)**(x01)
1.45828
exp(x00*x01)
1.45784
(x00)**(((-(-0.343029))+x01))
1.45759
(x00)**(x01)
1.4528
(x00)**((0.107431+x01))
1.44641
(x00)**(x01)
1.44613
(x00)**(x01)
1.4461
(x00)**(((-x00)+x01))
1.44066
exp(x01/x00)
1.44057
(x00)**(x01)
1.43953
(x00)**(x01)
1.43797
exp(x01*x00)
1.43386
exp(x01/x00)
1.43302
(x00)**(x01)
1.4324
(x00)**(x01)
1.42979
exp(x00*x01)
1.42966
(x00)**(((-x00)+x01))
1.42702
(exp(x00))**(x01)
1.42576
exp(x00*x01)
1.42494
(x00)**(((-x00)+x01))
1.41814
(x00)**(((-x00)+x01))
1.4167
selection is done
crossover is done
mutation is done
(x00)**(x00)
(((-(-0.343029))+x00))**(x01)
exp(x01*x01)
(0.519486)**(x01)
(x00)**(x00)
(0.059542)**(x00)
(x01)**(x01)
exp(0.045562*x01)
(x00)**((0.359315+(-0.717765)))
(((-0.611822)+x01))**(x01)
exp(sin(1.025598))
exp(0.342671)
(x00)**(x01)
(x00)**(((-(-0.415672))+x01))
(0.547438)**(x01)
(x01)**((-0.272413))
((-0.302524))**((0.107431+x00))
(x00)**(1.712515)
(x01)**(cos(1.875015*x00))
((-0.212707))**(x01)
(x00)**(((-0.295229)+x00))
exp(x00/x00)
(x00)**(x00)
(x01)**(x00)
(x00)**(0.813369)
exp(x00*x00)
((-0.133830))**(x01)
(x00)**((-0.000808))
(x00)**((-0.059964))
(1.221390)**(x01)
(x01)**((-1.021781))
(x00)**((-0.249881))
(0.359315)**(x00)
(x01)**(x00)
(x00)**(x01)
(x01)**(x01)
(x00)**(((-0.473276)+0.107431))
(x00)**(x01)
(((-(-0.343029))+x01))**((-0.336875))
(x00)**(x01)
(x00)**(x00)
(x00)**(x01)
((x00*x01))**(0.146383)
(x01)**(x01)
(x00)**(x01)
(x00)**(x01)
(2.718282)**(x01)
(x01)**(x01)
(cos(-0.960367))**(x00)
(x00)**(0.842114)
1 27
2 3
3 16
From C++ to C++ 35491
2.1684e-19
1.22263
0.582837
0.600872
2.1684e-19
0.520494
2.1684e-19
0.581996
0.502568
1.11254e-308
0.379854
0.384004
1.48963
1.50664
0.596004
2.1684e-19
1.11254e-308
2.1684e-19
2.1684e-19
1.11254e-308
2.1684e-19
0.602651
2.1684e-19
0.761781
2.1684e-19
2.1684e-19
1.11254e-308
0.589946
0.586886
0.595523
2.1684e-19
0.55454
0.602889
0.761546
1.53183
2.1684e-19
0.484211
1.49879
0.553612
1.53153
2.1684e-19
1.51173
2.1684e-19
2.1684e-19
1.45372
1.45839
0.59985
2.1684e-19
0.562006
2.1684e-19
fitness is counted
the best are found
Algorithm is running for 820101 seconds

General 26

(1.981751)**((cos(x00)+x01))
1.61178
(x00)**((0.359315+x01))
1.57477
(x00)**(x01)
1.55472
(x00)**(x01)
1.548
(x00)**(x01)
1.53855
(x00)**(x01)
1.53706
(x00)**(x01)
1.53307
(x00)**(x01)
1.53183
(x00)**(x01)
1.53153
(x00)**(x01)
1.5295
(x00)**(x01)
1.52273
(x00)**(x01)
1.52242
(x00)**(x01)
1.51876
(x00)**(x01)
1.51361
(x00)**(x01)
1.51173
(x00)**(x01)
1.51112
(x00)**(x01)
1.50853
(x00)**(((-(-0.415672))+x01))
1.50664
(x00)**(x01)
1.50307
(x00)**(x01)
1.50031
(x00)**(x01)
1.49879
(x00)**((0.359315+x01))
1.49397
(x00)**(x01)
1.49336
(x00)**(x01)
1.4924
(x00)**(x01)
1.48963
(x00)**(x01)
1.47759
(x00)**(x01)
1.4765
(x00)**(x01)
1.47475
(x00)**(x01)
1.47416
(x00)**(x01)
1.47101
(x00)**(x01)
1.47046
(x00)**(x01)
1.46762
(x00)**(((-x00)+x01))
1.4615
(x00)**(x01)
1.46008
(x00)**(x01)
1.45843
(x00)**(x01)
1.45839
(x00)**(x01)
1.45828
exp(x00*x01)
1.45784
(x00)**(((-(-0.343029))+x01))
1.45759
(x00)**(x01)
1.45372
(x00)**(x01)
1.4528
(x00)**((0.107431+x01))
1.44641
(x00)**(x01)
1.44613
(x00)**(x01)
1.4461
(x00)**(((-x00)+x01))
1.44066
exp(x01/x00)
1.44057
(x00)**(x01)
1.43953
(x00)**(x01)
1.43797
exp(x01*x00)
1.43386
exp(x01/x00)
1.43302
selection is done
crossover is done
mutation is done
(x00)**(0.650483)
(x00)**(1.326231)
(x00)**((-0.592601))
(x01)**(x01)
(0.138120)**(x01)
(x00)**(x01)
(1.981751)**((cos(x00)+x01))
(x00)**(cos(1.931970+x00))
(x00)**(x01)
((-0.266225))**(x01)
(x01)**(x01)
exp(-1.059759)
exp((-1.903137)*x00)
(x01)**(x01)
(x00)**(x01)
((-0.207091))**(x00)
(x00)**(x01)
((-x01))**(x01)
(x00)**(x00)
(x00)**(x01)
(x00)**(x00)
(x00)**(x00)
(x00)**(x00)
(1.981751)**((cos(x00)+x00))
(1.981751)**((x00+x00))
(x00)**(x00)
((-0.660896))**(x01)
(0.031193)**(x01)
(1/(x01))**(x01)
(x00)**(x01)
(x00)**(x01)
(1.981751)**((1.218624+log(0.714822, x01)))
exp(2.718282*x00)
(3.141593)**(x01)
(0.450356)**(x01)
(x01)**(x01)
(x01)**(0.540679)
(x00)**(0.162856)
exp(-0.672624)
(x01)**(x01)
(x01)**(x01)
exp(0.936946)
(x00)**(x01)
(x00)**(log(x01))
(log(1.173530))**(x01)
exp(exp(x00))
(0.258229)**((cos(x00)+x01))
(x01)**((0.359315+x00))
(x01)**(x00)
(x00)**(x01)
1 27
2 3
3 17
From C++ to C++ 30230
2.1684e-19
2.1684e-19
0.489846
2.1684e-19
0.593725
1.57655
1.59969
2.1684e-19
1.42731
1.11254e-308
2.1684e-19
0.353827
0.5365
2.1684e-19
1.43336
0.0184264
1.51988
1.11254e-308
2.1684e-19
1.4565
2.1684e-19
2.1684e-19
2.1684e-19
2.1684e-19
2.1684e-19
2.1684e-19
1.11254e-308
0.579412
2.1684e-19
1.4627
1.48195
2.1684e-19
2.1684e-19
0.593458
0.594993
2.1684e-19
2.1684e-19
0.615308
0.364262
2.1684e-19
2.1684e-19
0.394377
1.52859
2.1684e-19
0.585094
2.1684e-19
1.63066
2.1684e-19
0.764563
1.50402
fitness is counted
the best are found
Algorithm is running for 850331 seconds

General 27

(0.258229)**((cos(x00)+x01))
1.63066
(1.981751)**((cos(x00)+x01))
1.61178
(1.981751)**((cos(x00)+x01))
1.59969
(x00)**(x01)
1.57655
(x00)**((0.359315+x01))
1.57477
(x00)**(x01)
1.55472
(x00)**(x01)
1.548
(x00)**(x01)
1.53855
(x00)**(x01)
1.53706
(x00)**(x01)
1.53307
(x00)**(x01)
1.53183
(x00)**(x01)
1.53153
(x00)**(x01)
1.5295
(x00)**(x01)
1.52859
(x00)**(x01)
1.52273
(x00)**(x01)
1.52242
(x00)**(x01)
1.51988
(x00)**(x01)
1.51876
(x00)**(x01)
1.51361
(x00)**(x01)
1.51173
(x00)**(x01)
1.51112
(x00)**(x01)
1.50853
(x00)**(((-(-0.415672))+x01))
1.50664
(x00)**(x01)
1.50402
(x00)**(x01)
1.50307
(x00)**(x01)
1.50031
(x00)**(x01)
1.49879
(x00)**((0.359315+x01))
1.49397
(x00)**(x01)
1.49336
(x00)**(x01)
1.4924
(x00)**(x01)
1.48963
(x00)**(x01)
1.48195
(x00)**(x01)
1.47759
(x00)**(x01)
1.4765
(x00)**(x01)
1.47475
(x00)**(x01)
1.47416
(x00)**(x01)
1.47101
(x00)**(x01)
1.47046
(x00)**(x01)
1.46762
(x00)**(x01)
1.4627
(x00)**(((-x00)+x01))
1.4615
(x00)**(x01)
1.46008
(x00)**(x01)
1.45843
(x00)**(x01)
1.45839
(x00)**(x01)
1.45828
exp(x00*x01)
1.45784
(x00)**(((-(-0.343029))+x01))
1.45759
(x00)**(x01)
1.4565
(x00)**(x01)
1.45372
(x00)**(x01)
1.4528
selection is done
crossover is done
mutation is done
(x01)**(x01)
((-0.418726))**(x01)
((-0.065316))**(x00)
(x00)**(x01)
(2.718282)**(x00)
(x00)**(0.170758)
(x00)**(x00)
(0.299351)**((x00+x01))
exp(x01*x01)
(2.329762)**(x01)
(x00)**(1.116208)
(x01)**((-0.165568))
((cos(x00)+x01))**(x00)
(x01)**((-0.886930))
(0.138600)**((0.359315+x01))
(2.718282)**(x01)
(x01)**(x01)
(x00)**(x01)
(0.943284)**(x01)
((cos(x00)+x01))**(0.289608)
(x00)**(x00)
(x00)**(x00)
(x00)**(log(1.019096))
(x00)**(x01)
((-1.620906))**(x01)
(x00)**(x00)
((-1.149808))**(x01)
(x00)**(x01)
(x00)**(0.053431)
(2.718282)**(x01)
(x00)**((1/(-0.700301)+x01))
(x00)**(x01)
(x00)**(x01)
(x01)**(x01)
(cos(x00))**((((-1.674844))**(x00)+x01))
(x00)**(1.460630)
(x00)**((exp(x01)+x01))
(x01)**((cos(x00)+x01))
((-0.013780))**(x01)
(x00)**((x01+x01))
(1.981751)**((cos(x01)+x00))
((-1.288994))**((x01+x01))
(x00)**(0.191045)
((cos(x01)+x01))**(x01)
(x00)**(0.113146)
(x00)**(x01)
(0.885364)**(x01)
(x00)**((x00)**(x01))
((-0.128143))**(x01)
(0.258229)**((cos(x00)+(-0.318173)))
1 26
2 3
3 15
From C++ to C++ 35366
2.1684e-19
1.11254e-308
0.103686
1.46146
2.1684e-19
0.621861
2.1684e-19
1.24228
0.581325
0.594985
2.1684e-19
2.1684e-19
2.1684e-19
2.1684e-19
0.524369
0.609323
2.1684e-19
1.56481
0.581068
2.1684e-19
2.1684e-19
2.1684e-19
0.566498
1.52455
1.11254e-308
2.1684e-19
1.11254e-308
1.42997
0.595019
0.579367
0.817656
1.54156
1.57091
2.1684e-19
2.1684e-19
2.1684e-19
2.1684e-19
2.1684e-19
1.11254e-308
1.30937
2.1684e-19
1.11254e-308
0.621096
0.532568
0.613457
1.58387
0.590327
2.1684e-19
1.11254e-308
0.60999
fitness is counted
the best are found
Algorithm is running for 885697 seconds

General 28

(0.258229)**((cos(x00)+x01))
1.63066
(1.981751)**((cos(x00)+x01))
1.61178
(1.981751)**((cos(x00)+x01))
1.59969
(x00)**(x01)
1.58387
(x00)**(x01)
1.57655
(x00)**((0.359315+x01))
1.57477
(x00)**(x01)
1.57091
(x00)**(x01)
1.56481
(x00)**(x01)
1.55472
(x00)**(x01)
1.548
(x00)**(x01)
1.54156
(x00)**(x01)
1.53855
(x00)**(x01)
1.53706
(x00)**(x01)
1.53307
(x00)**(x01)
1.53183
(x00)**(x01)
1.53153
(x00)**(x01)
1.5295
(x00)**(x01)
1.52859
(x00)**(x01)
1.52455
(x00)**(x01)
1.52273
(x00)**(x01)
1.52242
(x00)**(x01)
1.51988
(x00)**(x01)
1.51876
(x00)**(x01)
1.51361
(x00)**(x01)
1.51173
(x00)**(x01)
1.51112
(x00)**(x01)
1.50853
(x00)**(((-(-0.415672))+x01))
1.50664
(x00)**(x01)
1.50402
(x00)**(x01)
1.50307
(x00)**(x01)
1.50031
(x00)**(x01)
1.49879
(x00)**((0.359315+x01))
1.49397
(x00)**(x01)
1.49336
(x00)**(x01)
1.4924
(x00)**(x01)
1.48963
(x00)**(x01)
1.48195
(x00)**(x01)
1.47759
(x00)**(x01)
1.4765
(x00)**(x01)
1.47475
(x00)**(x01)
1.47416
(x00)**(x01)
1.47101
(x00)**(x01)
1.47046
(x00)**(x01)
1.46762
(x00)**(x01)
1.4627
(x00)**(((-x00)+x01))
1.4615
(x00)**(x01)
1.46146
(x00)**(x01)
1.46008
(x00)**(x01)
1.45843
(x00)**(x01)
1.45839
selection is done
crossover is done
mutation is done
(x00)**(x01)
(x00)**(x00)
(x00)**((-0.280540))
(cos(x00))**(((x01)**(0.039604)+x01))
(x00)**(x00)
(x00)**(0.234006)
(x00)**(x01)
(x01)**(x01)
(x00)**(cos(1/(-0.166890)))
(x00)**(1.080024)
(x01)**(0.310641)
(1.950686)**(x00)
((-2.360628))**(x01)
(x00)**(x01)
((-0.186609))**(x01)
(x01)**(x01)
(x01)**(x01)
((-0.235742))**(x00)
(x01)**(0.375953)
(x01)**(1.129185)
(x00)**(x00)
(x00)**(x00)
(x01)**(x00)
(x00)**(0.707964)
(x00)**(0.073437)
(x01)**(x01)
(x00)**(x01)
((-1.441663))**(x01)
((-1.778433))**(x01)
((-0.548423))**(x01)
(x01)**(x00)
(x01)**(x01)
(x00)**(0.478527)
(x01)**(x01)
(x01)**(x01)
(x01)**(x01)
(x00)**(log((1.862960*x00)))
(x00)**(x00)
((cos(x00)+x00))**(x01)
(1.981751)**(((0.963730+x00)+x01))
(x01)**(x01)
(x01)**(3.141593)
(x00)**(x01)
(x01)**(0.047119)
((-0.753772))**(x01)
(x00)**(((-0.510987)+x01))
(x00)**((-0.235620))
(x00)**(1.997202)
(x00)**(x00)
(1.777927)**(x01)
1 26
2 3
3 15
From C++ to C++ 24700
1.45294
2.1684e-19
0.536782
2.1684e-19
2.1684e-19
0.623122
1.54395
2.1684e-19
2.1684e-19
2.1684e-19
2.1684e-19
2.1684e-19
1.11254e-308
1.40435
1.11254e-308
2.1684e-19
2.1684e-19
0.0282374
2.1684e-19
2.1684e-19
2.1684e-19
2.1684e-19
0.759265
2.1684e-19
0.608359
2.1684e-19
1.36567
1.11254e-308
1.11254e-308
1.11254e-308
0.760559
2.1684e-19
0.653089
2.1684e-19
2.1684e-19
2.1684e-19
2.1684e-19
2.1684e-19
1.16948
2.1684e-19
2.1684e-19
2.1684e-19
1.40238
2.1684e-19
1.11254e-308
0.920113
0.555943
2.1684e-19
2.1684e-19
0.602011
fitness is counted
the best are found
Algorithm is running for 910397 seconds

General 29

(0.258229)**((cos(x00)+x01))
1.63066
(1.981751)**((cos(x00)+x01))
1.61178
(1.981751)**((cos(x00)+x01))
1.59969
(x00)**(x01)
1.58387
(x00)**(x01)
1.57655
(x00)**((0.359315+x01))
1.57477
(x00)**(x01)
1.57091
(x00)**(x01)
1.56481
(x00)**(x01)
1.55472
(x00)**(x01)
1.548
(x00)**(x01)
1.54395
(x00)**(x01)
1.54156
(x00)**(x01)
1.53855
(x00)**(x01)
1.53706
(x00)**(x01)
1.53307
(x00)**(x01)
1.53183
(x00)**(x01)
1.53153
(x00)**(x01)
1.5295
(x00)**(x01)
1.52859
(x00)**(x01)
1.52455
(x00)**(x01)
1.52273
(x00)**(x01)
1.52242
(x00)**(x01)
1.51988
(x00)**(x01)
1.51876
(x00)**(x01)
1.51361
(x00)**(x01)
1.51173
(x00)**(x01)
1.51112
(x00)**(x01)
1.50853
(x00)**(((-(-0.415672))+x01))
1.50664
(x00)**(x01)
1.50402
(x00)**(x01)
1.50307
(x00)**(x01)
1.50031
(x00)**(x01)
1.49879
(x00)**((0.359315+x01))
1.49397
(x00)**(x01)
1.49336
(x00)**(x01)
1.4924
(x00)**(x01)
1.48963
(x00)**(x01)
1.48195
(x00)**(x01)
1.47759
(x00)**(x01)
1.4765
(x00)**(x01)
1.47475
(x00)**(x01)
1.47416
(x00)**(x01)
1.47101
(x00)**(x01)
1.47046
(x00)**(x01)
1.46762
(x00)**(x01)
1.4627
(x00)**(((-x00)+x01))
1.4615
(x00)**(x01)
1.46146
(x00)**(x01)
1.46008
(x00)**(x01)
1.45843
selection is done
crossover is done
mutation is done
(x00)**((-2.204424))
(x00)**(x01)
(x00)**(x01)
(3.141593)**(x01)
(0.133928)**((x00+x01))
(0.458235)**(x01)
(x00)**(x01)
(x00)**(x00)
(x01)**(x01)
(x00)**((-0.811104))
(x00)**(x01)
(x01)**(x01)
(x01)**(((-(-0.415672))+x01))
(0.552341)**(x01)
(x01)**(x01)
(x00)**(x00)
(x00)**(0.659777)
(x00)**(((-x01)+x00))
(x00)**(x01)
(0.258229)**(x00)
(x00)**(x01)
(x00)**((-1.332350))
(x00)**(x01)
(x01)**(x01)
(x00)**(x01)
(x01)**(x00)
((-1.835768))**(x01)
(x00)**((-0.391835))
(x00)**((cos(x01)+x01))
(x00)**(x00)
(x00)**((x00+x01))
(1.022175)**(x00)
(x00)**(x00)
(x00)**((-1.051931))
(x01)**(0.655096)
(x00)**(x01)
((-1.907742))**(x01)
(x01)**((-0.229696))
(x00)**(x00)
(x00)**((-0.575782))
(x00)**(x01)
(x00)**(x00)
(x00)**(x00)
((-0.691926))**(x00)
(x00)**(3.141593)
(x01)**(1.320914)
(x00)**(x01)
(x00)**(x00)
(x00)**((-0.894512))
(x01)**(x00)
1 28
2 3
3 17
From C++ to C++ 37306
0.58855
1.46653
1.4952
0.600006
1.06549
0.604465
1.45718
2.1684e-19
2.1684e-19
0.464045
1.44275
2.1684e-19
2.1684e-19
0.603825
2.1684e-19
2.1684e-19
2.1684e-19
2.1684e-19
1.46774
0.579981
1.48773
0.464564
1.43879
2.1684e-19
1.42189
0.760119
1.11254e-308
0.516528
2.1684e-19
2.1684e-19
2.1684e-19
0.669193
2.1684e-19
0.455116
2.1684e-19
1.46907
1.11254e-308
2.1684e-19
2.1684e-19
0.483143
1.52627
2.1684e-19
2.1684e-19
0.0019157
2.1684e-19
2.1684e-19
1.46563
2.1684e-19
0.453071
0.762332
fitness is counted
the best are found
Algorithm is running for 947703 seconds

General 30

(0.258229)**((cos(x00)+x01))
1.63066
(1.981751)**((cos(x00)+x01))
1.61178
(1.981751)**((cos(x00)+x01))
1.59969
(x00)**(x01)
1.58387
(x00)**(x01)
1.57655
(x00)**((0.359315+x01))
1.57477
(x00)**(x01)
1.57091
(x00)**(x01)
1.56481
(x00)**(x01)
1.55472
(x00)**(x01)
1.548
(x00)**(x01)
1.54395
(x00)**(x01)
1.54156
(x00)**(x01)
1.53855
(x00)**(x01)
1.53706
(x00)**(x01)
1.53307
(x00)**(x01)
1.53183
(x00)**(x01)
1.53153
(x00)**(x01)
1.5295
(x00)**(x01)
1.52859
(x00)**(x01)
1.52627
(x00)**(x01)
1.52455
(x00)**(x01)
1.52273
(x00)**(x01)
1.52242
(x00)**(x01)
1.51988
(x00)**(x01)
1.51876
(x00)**(x01)
1.51361
(x00)**(x01)
1.51173
(x00)**(x01)
1.51112
(x00)**(x01)
1.50853
(x00)**(((-(-0.415672))+x01))
1.50664
(x00)**(x01)
1.50402
(x00)**(x01)
1.50307
(x00)**(x01)
1.50031
(x00)**(x01)
1.49879
(x00)**(x01)
1.4952
(x00)**((0.359315+x01))
1.49397
(x00)**(x01)
1.49336
(x00)**(x01)
1.4924
(x00)**(x01)
1.48963
(x00)**(x01)
1.48773
(x00)**(x01)
1.48195
(x00)**(x01)
1.47759
(x00)**(x01)
1.4765
(x00)**(x01)
1.47475
(x00)**(x01)
1.47416
(x00)**(x01)
1.47101
(x00)**(x01)
1.47046
(x00)**(x01)
1.46907
(x00)**(x01)
1.46774
(x00)**(x01)
1.46762
selection is done
crossover is done
mutation is done
(x00)**(x01)
(0.771014)**(x01)
((-0.435815))**(x01)
(x01)**(x00)
(cos(x00))**(x01)
(x00)**((-0.285806))
(x00)**(x01)
((-1.433443))**(x01)
(1.029357)**(x01)
(x00)**(x01)
(x01)**(x01)
(x00)**(x00)
(x01)**(x01)
(2.379209)**(x01)
(x01)**(1.565853)
(x00)**(0.948645)
(x00)**(2.332779)
((0.359315+x01))**(x01)
(x01)**((cos(x00)+x01))
(x00)**((0.359315+x00))
(x01)**(x01)
(0.068937)**(x00)
(x01)**(x01)
(1.981751)**((cos(0.403158)+x01))
(x00)**(x01)
(x00)**(exp(0.862569)**(x00))
(x01)**(x01)
(sin(1.831746*0.530766))**(x01)
(x00)**(x01)
(x01)**(x01)
(x01)**(x01)
((-1.442666))**(x01)
(x01)**(x01)
(x00)**((-0.493011))
(x00)**(x00)
((sin(1.447333)+x01))**(x01)
(0.087452)**(x01)
(x00)**(x00)
(x00)**(x01)
((cos(x00)+(-1.528415)))**(x01)
(x00)**((-0.060790))
(x00)**(1.274552)
((-0.664867))**(x00)
(x01)**(x00)
(0.655677)**(x01)
(x00)**((cos(x00)+x01))
(x01)**(x01)
(0.258229)**((cos(x00)+(-1.842727)))
(x01)**((x01+x01))
(x00)**(x01)
1 27
2 3
3 16
From C++ to C++ 27085
1.38839
0.590883
1.11254e-308
0.753399
2.1684e-19
0.531524
1.5029
1.11254e-308
0.594963
1.4668
2.1684e-19
2.1684e-19
2.1684e-19
0.587003
2.1684e-19
2.1684e-19
2.1684e-19
0.574825
2.1684e-19
2.1684e-19
2.1684e-19
0.527581
2.1684e-19
0.570414
1.50528
2.1684e-19
2.1684e-19
0.548098
1.45779
2.1684e-19
2.1684e-19
1.11254e-308
2.1684e-19
0.495576
2.1684e-19
0.552009
0.599346
2.1684e-19
1.42766
1.11254e-308
0.597783
2.1684e-19
0.00315171
0.758068
0.595661
1.75822
2.1684e-19
2.1684e-19
2.1684e-19
1.44907
fitness is counted
the best are found
Algorithm is running for 974788 seconds

General 31

(x00)**((cos(x00)+x01))
1.75822
(0.258229)**((cos(x00)+x01))
1.63066
(1.981751)**((cos(x00)+x01))
1.61178
(1.981751)**((cos(x00)+x01))
1.59969
(x00)**(x01)
1.58387
(x00)**(x01)
1.57655
(x00)**((0.359315+x01))
1.57477
(x00)**(x01)
1.57091
(x00)**(x01)
1.56481
(x00)**(x01)
1.55472
(x00)**(x01)
1.548
(x00)**(x01)
1.54395
(x00)**(x01)
1.54156
(x00)**(x01)
1.53855
(x00)**(x01)
1.53706
(x00)**(x01)
1.53307
(x00)**(x01)
1.53183
(x00)**(x01)
1.53153
(x00)**(x01)
1.5295
(x00)**(x01)
1.52859
(x00)**(x01)
1.52627
(x00)**(x01)
1.52455
(x00)**(x01)
1.52273
(x00)**(x01)
1.52242
(x00)**(x01)
1.51988
(x00)**(x01)
1.51876
(x00)**(x01)
1.51361
(x00)**(x01)
1.51173
(x00)**(x01)
1.51112
(x00)**(x01)
1.50853
(x00)**(((-(-0.415672))+x01))
1.50664
(x00)**(x01)
1.50528
(x00)**(x01)
1.50402
(x00)**(x01)
1.50307
(x00)**(x01)
1.5029
(x00)**(x01)
1.50031
(x00)**(x01)
1.49879
(x00)**(x01)
1.4952
(x00)**((0.359315+x01))
1.49397
(x00)**(x01)
1.49336
(x00)**(x01)
1.4924
(x00)**(x01)
1.48963
(x00)**(x01)
1.48773
(x00)**(x01)
1.48195
(x00)**(x01)
1.47759
(x00)**(x01)
1.4765
(x00)**(x01)
1.47475
(x00)**(x01)
1.47416
(x00)**(x01)
1.47101
(x00)**(x01)
1.47046
selection is done
crossover is done
mutation is done
(x00)**(x01)
((x00+x01))**(x01)
(x00)**((log(x01, 1.079391)+x01))
(x00)**(1.276519)
(x00)**(exp(x01))
(2.718282)**(x01)
(x00)**((exp(0.093660)+x01))
(x00)**((x01+(-0.454591)))
(x00)**((-1.438269))
(x00)**(x01)
(0.258229)**(0.178095)
(0.443527)**(x01)
(0.779861)**(x01)
(x00)**(x01)
(x00)**(x01)
(x01)**((x01+x01))
(x00)**(1.578991)
(x00)**(0.625719)
(x00)**(x01)
(0.792429)**(x01)
(x00)**((0.359315+x00))
(x00)**(x00)
(0.258229)**((cos(x00)+(cos(x00)+x01)))
(x00)**(x01)
(3.141593)**(x00)
(x00)**(0.424773)
(x01)**(x00)
((-0.009683))**(x01)
(2.718282)**(x00)
(x01)**(1.840643)
(x00)**(0.657528)
(x00)**(0.900138)
(x01)**(x01)
(x01)**(x01)
(x01)**(x01)
(x01)**(x01)
(x01)**(0.513491)
(1.573450)**(x01)
(1.595524)**(x00)
(x00)**(x01)
(x00)**(x01)
((-0.708410))**(x01)
(x00)**(x01)
(x01)**(0.166264)
(x00)**(x01)
(x00)**(x00)
(x01)**((cos(x00)+x01))
(1.143251)**(x01)
(0.718375)**(x01)
(x00)**((-0.037217))
1 28
2 3
3 17
From C++ to C++ 33511
1.46368
1.33135
2.1684e-19
2.1684e-19
2.1684e-19
0.59435
2.1684e-19
0.945283
0.485282
1.47326
0.377032
0.598576
0.5884
1.45604
1.47363
2.1684e-19
2.1684e-19
2.1684e-19
1.4765
0.608047
2.1684e-19
2.1684e-19
1.38998
1.48346
2.1684e-19
0.653852
0.760502
1.11254e-308
2.1684e-19
2.1684e-19
0.664193
2.1684e-19
2.1684e-19
2.1684e-19
2.1684e-19
2.1684e-19
2.1684e-19
0.579764
2.1684e-19
1.55321
1.51362
1.11254e-308
1.44337
2.1684e-19
1.4362
2.1684e-19
2.1684e-19
0.585053
0.607573
0.604946
fitness is counted
the best are found
Algorithm is running for 1.0083e+06 seconds

General 32

(x00)**((cos(x00)+x01))
1.75822
(0.258229)**((cos(x00)+x01))
1.63066
(1.981751)**((cos(x00)+x01))
1.61178
(1.981751)**((cos(x00)+x01))
1.59969
(x00)**(x01)
1.58387
(x00)**(x01)
1.57655
(x00)**((0.359315+x01))
1.57477
(x00)**(x01)
1.57091
(x00)**(x01)
1.56481
(x00)**(x01)
1.55472
(x00)**(x01)
1.55321
(x00)**(x01)
1.548
(x00)**(x01)
1.54395
(x00)**(x01)
1.54156
(x00)**(x01)
1.53855
(x00)**(x01)
1.53706
(x00)**(x01)
1.53307
(x00)**(x01)
1.53183
(x00)**(x01)
1.53153
(x00)**(x01)
1.5295
(x00)**(x01)
1.52859
(x00)**(x01)
1.52627
(x00)**(x01)
1.52455
(x00)**(x01)
1.52273
(x00)**(x01)
1.52242
(x00)**(x01)
1.51988
(x00)**(x01)
1.51876
(x00)**(x01)
1.51362
(x00)**(x01)
1.51361
(x00)**(x01)
1.51173
(x00)**(x01)
1.51112
(x00)**(x01)
1.50853
(x00)**(((-(-0.415672))+x01))
1.50664
(x00)**(x01)
1.50528
(x00)**(x01)
1.50402
(x00)**(x01)
1.50307
(x00)**(x01)
1.5029
(x00)**(x01)
1.50031
(x00)**(x01)
1.49879
(x00)**(x01)
1.4952
(x00)**((0.359315+x01))
1.49397
(x00)**(x01)
1.49336
(x00)**(x01)
1.4924
(x00)**(x01)
1.48963
(x00)**(x01)
1.48773
(x00)**(x01)
1.48346
(x00)**(x01)
1.48195
(x00)**(x01)
1.47759
(x00)**(x01)
1.4765
(x00)**(x01)
1.4765
selection is done
crossover is done
mutation is done
(x00)**(x01)
(x00)**(2.544154)
(x00)**((-1.080450))
(x01)**(0.446410)
(x00)**((-0.052957))
(0.446645)**(x01)
((-0.031015))**(x00)
(x00)**(0.820269)
(x00)**(x01)
(x00)**(cos(x01))
(x01)**(x01)
(0.505650)**(x01)
(x01)**(x01)
(x00)**(x01)
(x00)**(x01)
(x00)**(x00)
(0.562968)**(x01)
((-0.923925))**(x01)
(x00)**(x01)
(x00)**(x01)
(x00)**(1.734680)
(x01)**(x01)
(x00)**(x01)
(1.008759)**(x00)
(x01)**(x01)
(x00)**(x01)
(x00)**(x01)
(x00)**(0.354788)
(1.354203)**(x00)
(x00)**(x00)
(0.258229)**((cos(x00)+x01))
((-1.303128))**(x01)
(x01)**(x01)
(0.007140)**(x00)
((-(-0.170043)))**(x01)
(x00)**(x01)
(x01)**((-0.979363))
(x00)**(x01)
(x01)**(x01)
(x01)**(x01)
(0.258229)**((cos(x00)+x01))
(x00)**(x01)
(x00)**(x00)
(x00)**(2.475376)
(x01)**(x01)
(x00)**(x01)
(0.636964)**((x01+x01))
(x01)**(x00)
(x00)**(x00)
(x00)**(x00)
1 28
2 3
3 17
